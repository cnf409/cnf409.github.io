<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Invis on conflict</title>
    <link>/invis/</link>
    <description>Recent content in Invis on conflict</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 29 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/invis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ðŸ‡¬ðŸ‡§ PicoCTF 2023 - binexp/hijacking</title>
      <link>/invis/picoctf2023-hijacking/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/invis/picoctf2023-hijacking/</guid>
      <description>Note Hijacking was a binary exploitation challenge from PicoCTF 2023.
It was interesting and I always enjoy these privilege escalation exploits. They are very common in HackTheBox and TryHackMe boxes, so it&amp;rsquo;s useful to know about them.
Description Getting root access can allow you to read the flag. Luckily there is a python file that you might like to play with. Through Social engineering, we&amp;#39;ve got the credentials to use on the server.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ RushCTF 2023 - pwn/onyo</title>
      <link>/invis/rushctf2023-onyo/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/invis/rushctf2023-onyo/</guid>
      <description>Note Writeup for the second pwn challenge from the RushCTF 2023.
Description Hello frend! Can you read flag.txt? onyo.zip
File information checksec chall &amp;amp;&amp;amp; file chall [*] &amp;#39;/home/conflict/ctfs/rushctf2023/pwn/onyo/chall&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) chall: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=838c3ab2792a09b81c8259f7b86265675b60d80e, for GNU/Linux 3.2.0, not stripped So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with NX enabled.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ RushCTF 2023 - pwn/poune</title>
      <link>/invis/rushctf2023-poune/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/invis/rushctf2023-poune/</guid>
      <description>Note Writeup for the first pwn challenge from the RushCTF 2023.
Description Hello kind sir!Â Can you read flag.txt? poune.zip
File information checksec chall &amp;amp;&amp;amp; file chall [*] &amp;#39;/home/conflict/ctfs/rushctf2023/pwn/poune/chall&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) chall: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6f24ec1597edb178ec5b862b44e5fbcb92df3137, for GNU/Linux 3.2.0, not stripped So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with NX enabled.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ RushCTF 2023 - web/blog</title>
      <link>/invis/rushctf2023-blog/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/invis/rushctf2023-blog/</guid>
      <description>Note Second web challenge from the RushCTF 2023.
Description Hey what do you think about my blog? Hint: where are password&amp;rsquo;s stored?
Recon The main page is a beautiful default blog page, nothing much to do here
If we look around and try to see posts, we can see that they&amp;rsquo;re fetched through a GET parameter:
Exploitation This kind of parameter is usually vulnerable to LFI, which would allow us to render any file from the server.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ RushCTF 2023 - web/secure-vault-v2</title>
      <link>/invis/rushctf2023-securevaultv2/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/invis/rushctf2023-securevaultv2/</guid>
      <description>Note First web challenge from the RushCTF 2023. I liked this challege a lot and I learned a new thing about NoSQL injections. It might just be my favourite one from this CTF.
Description My SecureVault was Hacked last year. It was because of that damm SQL language, see if you can get my password now! Goodluck Hint: SAY NO TO &amp;hellip;
Recon Since the description talks about SQL, and the hint tells us to &amp;ldquo;say no to &amp;hellip;&amp;rdquo; we can assume that we&amp;rsquo;re going to do NoSQL Injection.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ LACTF 2023 - pwn/gatekeep</title>
      <link>/invis/lactf2023-gatekeep/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/invis/lactf2023-gatekeep/</guid>
      <description>Note First pwn challenge of this CTF. It&amp;rsquo;s pretty easy because it only consists in overwriting a variable on the stack to make a condition valid and print the flag.
Description If I gaslight you enough, you won&amp;#39;t be able to get my flag! :) Note: The attached binary is the exact same as the one executing on the remote server. Dockerfile, gatekeep.c, gatekeep
File information checksec gatekeep &amp;amp;&amp;amp; file gatekeep [*] &amp;#39;/home/conflict/ctfs/lactf2023/gatekeep/gatekeep&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled gatekeep: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.</description>
    </item>
    
  </channel>
</rss>
